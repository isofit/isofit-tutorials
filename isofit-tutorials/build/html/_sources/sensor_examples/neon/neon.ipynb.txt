{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "35412b86-171d-473c-8575-470b8fbed89d",
   "metadata": {},
   "source": [
    "# NEON\n",
    "\n",
    "Here, we show how one would apply ISOFIT to data collected by the NEON imaging spectrometer.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f81e3c4a-0bef-4cbe-a494-75c8e0d908ca",
   "metadata": {},
   "source": [
    "## Setup\n",
    "\n",
    "This is an excercise in executing ISOFIT on entire images collected on two dates from the NEON dataset.\n",
    "\n",
    "Prerequisites:\n",
    "- Download sample data from https://avng.jpl.nasa.gov/pub/PBrodrick/isofit/tutorials/subset_data.zip.  This dataset was prepped already from the data_prep notebook.  Place the dataset into the NEON folder in this repo and unzip it, which will create the 'data' folder which includes the 'subsets' directory.\n",
    "- Have a working installation of ISOFIT, with sRTMnet installed and configured (see environment variable specification on the next line)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "ed8d9de0-a74a-4e6c-83b2-54f7bc32f593",
   "metadata": {},
   "outputs": [],
   "source": [
    "import logging\n",
    "import os\n",
    "from pathlib import Path\n",
    "from types import SimpleNamespace\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "import scipy\n",
    "from spectral.io import envi\n",
    "\n",
    "import isofit\n",
    "from isofit.utils.apply_oe import apply_oe \n",
    "from isofit.utils.surface_model import surface_model\n",
    "from isofit import ray\n",
    "ray.shutdown()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "164060bf-3cad-4d58-811f-838158d7d967",
   "metadata": {},
   "source": [
    "ISOFIT needs at minimum three pieces as input:\n",
    "\n",
    "    1. Radiance measurements (rdn)\n",
    "    2. Observation values    (obs)\n",
    "    3. Location information  (loc)\n",
    "\n",
    "This sample dataset from NEON has radiance and observation data, but no location values (more recent NEON datasets include the location file).  However, we can 'fake' the location file with sufficient accuracy for ISOFIT to run successfully.  Note that there are data available for two dates:\n",
    "\n",
    "```\n",
    "Radiance\n",
    "├── 173647\n",
    "│   ├── NIS01_20210403_173647_obs_ort\n",
    "│   ├── NIS01_20210403_173647_obs_ort.hdr\n",
    "│   ├── NIS01_20210403_173647_rdn_ort\n",
    "│   └── NIS01_20210403_173647_rdn_ort.hdr\n",
    "└── 174150\n",
    "    ├── NIS01_20210403_174150_obs_ort\n",
    "    ├── NIS01_20210403_174150_obs_ort.hdr\n",
    "    ├── NIS01_20210403_174150_rdn_ort\n",
    "    └── NIS01_20210403_174150_rdn_ort.hdr\n",
    "```\n",
    "\n",
    "These files have corresponding in situ data as well, and below we've encoded the locations of each, which we can use to help subset data files.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "7b88339c-ac36-4aab-98b7-2a1dd07ab8a5",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Data subset directory at: /Users/bgreenbe/.isofit/neon_subset\n",
      "Surface model at: /Users/bgreenbe/.isofit/examples/20171108_Pasadena/configs/ang20171108t184227_surface.json\n",
      "sRTMnet emulator path (required): /Users/bgreenbe/.isofit/srtmnet/sRTMnet_v120.h5\n",
      "6s path (required): /Users/bgreenbe/Github/6sMultiComponentFN/Sixs\n"
     ]
    }
   ],
   "source": [
    "# Enable the ISOFIT logger\n",
    "logging.getLogger().setLevel(logging.INFO)\n",
    "\n",
    "# Find where we're running the tutorial from\n",
    "home = os.path.abspath(os.getcwd())\n",
    "\n",
    "# Path to the input NEON data\n",
    "subset_dir = str(Path('~/.isofit/neon_subset').expanduser())\n",
    "print(f'Data subset directory at: {subset_dir}')\n",
    "\n",
    "# Path to write isofit output\n",
    "output = str(Path('~/.isofit/neon_subset/output').expanduser())\n",
    "if os.path.isdir(output) is False:\n",
    "    os.mkdir(output)\n",
    "\n",
    "if os.path.isdir(subset_dir) is False:\n",
    "    os.mkdir(subset_dir)\n",
    "\n",
    "surface_model_path = str(Path('~/.isofit/examples/20171108_Pasadena/configs/ang20171108t184227_surface.json').expanduser())\n",
    "print(f'Surface model at: {surface_model_path}')\n",
    "neon_id = '173647'\n",
    "\n",
    "\n",
    "# Optionally set some environment variables as needed\n",
    "#os.environ['EMULATOR_PATH'] = '/Users/brodrick/isofit_support/sRTMnet_v120.h5'\n",
    "#os.environ['SIXS_DIR'] = '/Users/brodrick/6s/'\n",
    "\n",
    "print(f'sRTMnet emulator path (required): {os.environ[\"EMULATOR_PATH\"]}')\n",
    "print(f'6s path (required): {os.environ[\"SIXS_DIR\"]}')\n",
    "\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "727dcd06-2a38-4020-8a15-b6707b8ed453",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Extract the image locations of each point of interest (POI)\n",
    "# These are defined in the NEON report as pixel locations, so we round here to convert to indices\n",
    "report = {}\n",
    "report['173647'] = {           # Upp L Y  | Low R Y  | Upp L X | Low R X\n",
    "    'WhiteTarp': np.round([2224.9626, 2230.9771, 316.0078, 324.9385,]).astype(int),\n",
    "    'BlackTarp': np.round([2224.9626, 2231.0032, 328.0086, 333.9731,]).astype(int),\n",
    "    'Veg'      : np.round([2245.0381, 2258.8103, 343.9006, 346.9423,]).astype(int),\n",
    "    'RoadEW'   : np.round([2214.9905, 2216.9978, 348.9902, 373.0080,]).astype(int),\n",
    "    'RoadNS'   : np.round([2205.9580, 2225.9612, 357.9536, 359.9608,]).astype(int)\n",
    "}\n",
    "report['174150'] = {           # Upp L Y | Low R Y | Upp L X  | Low R X\n",
    "    'WhiteTarp': np.round([653.9626, 659.9771, 3143.0078, 3151.9385]).astype(int),\n",
    "    'BlackTarp': np.round([653.9626, 660.0032, 3155.0086, 3160.9731]).astype(int),\n",
    "    'Veg'      : np.round([674.0381, 687.8103, 3170.9006, 3173.9423]).astype(int),\n",
    "    'RoadEW'   : np.round([643.9905, 645.9978, 3175.9902, 3200.0080]).astype(int),\n",
    "    'RoadNS'   : np.round([634.9580, 654.9612, 3184.9536, 3186.9608]).astype(int)\n",
    "}\n",
    "# Converts numpy array to comma-separated string for ISOFIT\n",
    "toString = lambda array: ', '.join(str(v) for v in array)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "a5656147-509e-41f4-9cac-c9b81117c5b2",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Which NEON date to process - change this to process a different date\n",
    "neon_id = list(report.keys())[0]\n",
    "\n",
    "# Select the locations from the neon id -- roi == Regions of Interest\n",
    "roi = report[neon_id]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e9ec9046-3c9d-47bf-914c-68e67424065f",
   "metadata": {},
   "source": [
    "#### Loc file generation\n",
    "\n",
    "NEON doesn't distribute (?) a loc file, so let's fake one for now.  We'll do this for the full file and for the subset."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "f5b51ea6-f2ba-4348-9ec9-4a3eadd6c1c0",
   "metadata": {},
   "outputs": [],
   "source": [
    "def getMetadata(file, remove=['fwhm', 'band names', 'wavelength', 'wavelength units']):\n",
    "    \"\"\"\n",
    "    Retrieves the metadata from an envi header\n",
    "\n",
    "    Parameters\n",
    "    ----------\n",
    "    rdn: str\n",
    "        Path to the RDN header file containing metadata\n",
    "    remove: list, default=['fwhm', 'band names', 'wavelength', 'wavelength units']\n",
    "        Removes keys from the metadata dictionary\n",
    "    \"\"\"\n",
    "    rdn_ds   = envi.open(file)\n",
    "    metadata = rdn_ds.metadata.copy()\n",
    "    for key in remove:\n",
    "        if key in metadata:\n",
    "            del metadata[key]\n",
    "        else:\n",
    "            print(f'Key {key!r} not found in the metadata, skipping')\n",
    "\n",
    "    return metadata\n",
    "\n",
    "def fakeLOC(rdn, lon, lat, elv, output=None, **kwargs):\n",
    "    \"\"\"\n",
    "    Creates a fake LOC file\n",
    "\n",
    "    Parameters\n",
    "    ----------\n",
    "    rdn: str\n",
    "        Path to the RDN header file containing metadata\n",
    "    lon: float\n",
    "        Longitude value for location\n",
    "    lat: float\n",
    "        Latitude value for location\n",
    "    elv: float\n",
    "        Elevation in kilometers\n",
    "    output: str, default=None\n",
    "        Path to write the LOC file to. If None, will attempt to replace the\n",
    "        substring 'rdn' in the `rdn` path with `loc`\n",
    "    **kwargs\n",
    "        Additional arguments passed to getMetadata()\n",
    "    \"\"\"\n",
    "    if not output:\n",
    "        if 'rdn' in rdn:\n",
    "            output = rdn.replace('rdn', 'loc')\n",
    "        else:\n",
    "            Logger.error('No ouput file specified and cannot generate a unique name')\n",
    "            return False\n",
    "\n",
    "    metadata = getMetadata(rdn, **kwargs)\n",
    "    metadata['bands'] = 3\n",
    "\n",
    "    ds  = envi.create_image(output, metadata, ext='', force=True)\n",
    "    loc = ds.open_memmap(interleave='bip', writable=True)\n",
    "\n",
    "    loc[..., 0] = lon\n",
    "    loc[..., 1] = lat\n",
    "    loc[..., 2] = elv\n",
    "\n",
    "    del ds, loc\n",
    "\n",
    "def fakeOBS(rdn, param0=0, sea=0, sez=0, soa=0, soz=0, phase=0, slope=0, aspect=0, cosi=0, param9=0, param10=0, output=None, **kwargs):\n",
    "    \"\"\"\n",
    "    Creates a fake OBS file\n",
    "\n",
    "    Parameters\n",
    "    ----------\n",
    "    rdn: str\n",
    "        Path to the RDN file containing metadata\n",
    "    param0: int, float, default=0\n",
    "        Parameter 0\n",
    "    sea: int, float, default=0\n",
    "        Solar Azimuth\n",
    "    sez: int, float, default=0\n",
    "        Sensor Zenith\n",
    "    soa: int, float, default=0\n",
    "        Solar Azimuth\n",
    "    soz: int, float, default=0\n",
    "        Solar Zenith\n",
    "    phase: int, float, default=0\n",
    "        Phase\n",
    "    slope: int, float, default=0\n",
    "        Slope\n",
    "    aspect: int, float, default=0\n",
    "        Aspect\n",
    "    cosi: int, float, default=0\n",
    "        COS(i)\n",
    "    param9: int, float, default=0\n",
    "        Parameter 9\n",
    "    param10: int, float, default=0\n",
    "        Parameter 10\n",
    "    output: str, default=None\n",
    "        Path to write the OBS file to. If None, will attempt to replace the\n",
    "        substring 'rdn' in the `rdn` path with `obs`\n",
    "    **kwargs\n",
    "        Additional arguments passed to getMetadata()\n",
    "    \"\"\"\n",
    "    if not output:\n",
    "        if 'rdn' in rdn:\n",
    "            output = rdn.replace('rdn', 'loc')\n",
    "        else:\n",
    "            print('No ouput file specified and cannot generate a unique name')\n",
    "            return False\n",
    "\n",
    "    rdn_ds   = envi.open(rdn)\n",
    "    metadata = getMetadata(rdn, **kwargs)\n",
    "    metadata['bands'] = 11\n",
    "\n",
    "    ds  = envi.create_image(output, metadata, ext='', force=True)\n",
    "    obs = ds.open_memmap(interleave='bip', writable=True)\n",
    "\n",
    "    obs[...,  0] = param0\n",
    "    obs[...,  1] = sea\n",
    "    obs[...,  2] = sez\n",
    "    obs[...,  3] = soa\n",
    "    obs[...,  4] = soz\n",
    "    obs[...,  5] = phase\n",
    "    obs[...,  6] = slope\n",
    "    obs[...,  7] = aspect\n",
    "    obs[...,  8] = cosi\n",
    "    obs[...,  9] = param9\n",
    "    obs[..., 10] = param10\n",
    "\n",
    "    del ds, obs\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "bac7ba6b-1c0e-41b7-97e0-d9e137a9e217",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Key 'band names' not found in the metadata, skipping\n"
     ]
    }
   ],
   "source": [
    "fakeLOC(\n",
    "    rdn = os.path.join(subset_dir, f'NIS01_20210403_{neon_id}_rdn_ort.hdr'),\n",
    "    lon = -105.237000,\n",
    "    lat = 40.125000,\n",
    "    elv = 1689.0\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "83bf8ace-3e19-4674-86df-d2f46e220a32",
   "metadata": {},
   "source": [
    "## Apply OE\n",
    "\n",
    "The next part walks through running the ISOFIT utility script `isofit/utils/apply_oe.py`. This is the first step of executing ISOFIT and will generate a default configuration."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "d0ec94f8-b1e7-4e4d-9b8f-450134ca5a83",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0 ['/Users/bgreenbe/.isofit/data/reflectance/surface_model_ucsb']\n",
      "1 ['/Users/bgreenbe/.isofit/data/reflectance/surface_model_ucsb']\n",
      "2 ['/Users/bgreenbe/.isofit/data/reflectance/surface_model_ucsb']\n",
      "3 ['/Users/bgreenbe/.isofit/data/reflectance/surface_model_ucsb']\n",
      "4 ['/Users/bgreenbe/.isofit/data/reflectance/surface_model_ucsb']\n",
      "5 ['/Users/bgreenbe/.isofit/data/reflectance/surface_model_ucsb']\n",
      "6 ['/Users/bgreenbe/.isofit/data/reflectance/surface_model_ucsb']\n",
      "7 ['/Users/bgreenbe/.isofit/data/reflectance/surface_model_ucsb']\n"
     ]
    }
   ],
   "source": [
    "output_surface_file = str(Path('~/.isofit/examples/20171108_Pasadena/configs/surface.mat').expanduser())\n",
    "surface_model(**{\n",
    "    'config_path': surface_model_path,\n",
    "    'output_path': output_surface_file,\n",
    "    'wavelength_path': os.path.join(subset_dir,f'NIS01_20210403_{neon_id}_rdn_ort.hdr')\n",
    "})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "3cbe6f39-6d6f-4182-abfb-30e95ce49ede",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "INFO:2025-07-08,15:20:08 || apply_oe.py:apply_oe() | Checking input data files...\n",
      "INFO:2025-07-08,15:20:08 || apply_oe.py:apply_oe() | ...Data file checks complete\n",
      "INFO:2025-07-08,15:20:08 || apply_oe.py:apply_oe() | Setting up files and directories....\n",
      "INFO:2025-07-08,15:20:08 || template_construction.py:__init__() | Flightline ID: NIS01_20210403_173647\n",
      "INFO:2025-07-08,15:20:08 || template_construction.py:__init__() | no noise path found, proceeding without\n",
      "INFO:2025-07-08,15:20:08 || template_construction.py:stage_files() | Staging /Users/bgreenbe/.isofit/examples/20171108_Pasadena/configs/surface.mat to /Users/bgreenbe/.isofit/neon_subset/output/NIS01_20210403_173647/data/surface.mat\n",
      "INFO:2025-07-08,15:20:08 || apply_oe.py:apply_oe() | ...file/directory setup complete\n",
      "INFO:2025-07-08,15:20:08 || apply_oe.py:apply_oe() | Using inversion windows: [[350.0, 1360.0], [1410, 1800.0], [1970.0, 2500.0]]\n",
      "INFO:2025-07-08,15:20:08 || apply_oe.py:apply_oe() | No wavelength file provided. Obtaining wavelength grid from ENVI header of radiance cube.\n",
      "INFO:2025-07-08,15:20:08 || apply_oe.py:apply_oe() | Wavelength units of nm inferred...converting to microns\n",
      "WARNING:2025-07-08,15:20:08 || template_construction.py:check_surface_model() | Center wavelengths provided in surface model file do not match wavelengths in radiance cube. Please consider rebuilding your surface model for optimal performance.\n",
      "INFO:2025-07-08,15:20:08 || apply_oe.py:apply_oe() | Observation means:\n",
      "INFO:2025-07-08,15:20:08 || apply_oe.py:apply_oe() | Path (km): 1.0036078691482544\n",
      "INFO:2025-07-08,15:20:08 || apply_oe.py:apply_oe() | To-sensor azimuth (deg): 153.4481201171875\n",
      "INFO:2025-07-08,15:20:08 || apply_oe.py:apply_oe() | To-sensor zenith (deg): 1.619314193725586\n",
      "INFO:2025-07-08,15:20:08 || apply_oe.py:apply_oe() | To-sun azimuth (deg): 145.23248291015625\n",
      "INFO:2025-07-08,15:20:08 || apply_oe.py:apply_oe() | To-sun zenith (deg): 39.8218994140625\n",
      "INFO:2025-07-08,15:20:08 || apply_oe.py:apply_oe() | Relative to-sun azimuth (deg): 31.813383102416992\n",
      "INFO:2025-07-08,15:20:08 || apply_oe.py:apply_oe() | Altitude (km): 2.692207098007202\n",
      "INFO:2025-07-08,15:20:08 || apply_oe.py:apply_oe() | Segmenting...\n",
      "2025-07-08 15:20:10,698\tINFO worker.py:1917 -- Started a local Ray instance.\n",
      "\u001b[36m(segment_chunk pid=17119)\u001b[0m INFO:2025-07-08,15:20:11 ||| 0: starting\n",
      "INFO:2025-07-08,15:20:11 || apply_oe.py:apply_oe() | Extracting /Users/bgreenbe/.isofit/neon_subset/output/NIS01_20210403_173647/input/NIS01_20210403_173647_subs_rdn\n",
      "2025-07-08 15:20:11,728\tINFO worker.py:1747 -- Calling ray.init() again after it has already been called.\n",
      "INFO:2025-07-08,15:20:11 || apply_oe.py:apply_oe() | Extracting /Users/bgreenbe/.isofit/neon_subset/output/NIS01_20210403_173647/input/NIS01_20210403_173647_subs_obs\n",
      "\u001b[36m(segment_chunk pid=17119)\u001b[0m INFO:2025-07-08,15:20:11 ||| 0: completing\n",
      "2025-07-08 15:20:11,781\tINFO worker.py:1747 -- Calling ray.init() again after it has already been called.\n",
      "\u001b[36m(extract_chunk pid=17119)\u001b[0m INFO:2025-07-08,15:20:11 ||| 0: starting\n",
      "INFO:2025-07-08,15:20:11 || apply_oe.py:apply_oe() | Extracting /Users/bgreenbe/.isofit/neon_subset/output/NIS01_20210403_173647/input/NIS01_20210403_173647_subs_loc\n",
      "2025-07-08 15:20:11,825\tINFO worker.py:1747 -- Calling ray.init() again after it has already been called.\n",
      "INFO:2025-07-08,15:20:11 || apply_oe.py:apply_oe() | Pre-solve H2O grid: [0.2  0.84 1.49 2.13 2.77 3.42 4.06 4.7  5.35 5.99]\n",
      "INFO:2025-07-08,15:20:11 || apply_oe.py:apply_oe() | Writing H2O pre-solve configuration file.\n",
      "INFO:2025-07-08,15:20:11 || ini.py:toTemplate() | Saved converted json to: /Users/bgreenbe/.isofit/neon_subset/output/NIS01_20210403_173647/config/NIS01_20210403_173647_h2o.json.tmpl\n",
      "INFO:2025-07-08,15:20:11 || apply_oe.py:apply_oe() | Run ISOFIT initial guess\n",
      "INFO:2025-07-08,15:20:11 || configs.py:create_new_config() | Loading config file: /Users/bgreenbe/.isofit/neon_subset/output/NIS01_20210403_173647/config/NIS01_20210403_173647_h2o.json\n",
      "INFO:2025-07-08,15:20:11 || configs.py:get_config_errors() | Checking config sections for configuration issues\n",
      "INFO:2025-07-08,15:20:11 || configs.py:get_config_errors() | Configuration file checks complete, no errors found.\n",
      "\u001b[36m(extract_chunk pid=17119)\u001b[0m INFO:2025-07-08,15:20:11 ||| 0: starting\n",
      "2025-07-08 15:20:11,882\tINFO worker.py:1747 -- Calling ray.init() again after it has already been called.\n",
      "INFO:2025-07-08,15:20:11 || isofit.py:run() | Building first forward model, will generate any necessary LUTs\n",
      "\u001b[36m(extract_chunk pid=17119)\u001b[0m INFO:2025-07-08,15:20:11 ||| 0: starting\n",
      "INFO:2025-07-08,15:20:11 || radiative_transfer_engine.py:__init__() | Loading from wavelength_file: /Users/bgreenbe/.isofit/neon_subset/output/NIS01_20210403_173647/data/wavelengths.txt\n",
      "INFO:2025-07-08,15:20:11 || radiative_transfer_engine.py:__init__() | No LUT store found, beginning initialization and simulations\n",
      "INFO:2025-07-08,15:20:11 || radiative_transfer_engine.py:__init__() | Initializing LUT file\n",
      "INFO:2025-07-08,15:20:11 || radiative_transfer_engine.py:runSimulations() | Running any pre-sim functions\n",
      "INFO:2025-07-08,15:20:11 || sRTMnet.py:preSim() | Creating a simulator configuration\n",
      "INFO:2025-07-08,15:20:11 || sRTMnet.py:preSim() | Building simulator and executing (6S)\n",
      "INFO:2025-07-08,15:20:11 || radiative_transfer_engine.py:__init__() | No LUT store found, beginning initialization and simulations\n",
      "INFO:2025-07-08,15:20:11 || radiative_transfer_engine.py:__init__() | Initializing LUT file\n",
      "INFO:2025-07-08,15:20:12 || radiative_transfer_engine.py:runSimulations() | Running any pre-sim functions\n",
      "INFO:2025-07-08,15:20:12 || radiative_transfer_engine.py:runSimulations() | Executing parallel simulations\n",
      "\u001b[36m(streamSimulation pid=17119)\u001b[0m INFO:2025-07-08,15:20:12 ||| Loaded ini from: /Users/bgreenbe/.isofit/isofit.ini\n",
      "INFO:2025-07-08,15:20:14 || common.py:__call__() |  20.00% simulations complete (elapsed: 0:00:02.100901, rate: 0:00:00.210090, eta: 0:00:18.908109)\n",
      "INFO:2025-07-08,15:20:14 || radiative_transfer_engine.py:runSimulations() | Flushing netCDF to disk\n",
      "INFO:2025-07-08,15:20:14 || common.py:__call__() |  30.00% simulations complete (elapsed: 0:00:02.151416, rate: 0:00:00.215142, eta: 0:00:08.605664)\n",
      "INFO:2025-07-08,15:20:14 || radiative_transfer_engine.py:runSimulations() | Flushing netCDF to disk\n",
      "INFO:2025-07-08,15:20:14 || common.py:__call__() |  40.00% simulations complete (elapsed: 0:00:02.198190, rate: 0:00:00.219819, eta: 0:00:05.129110)\n",
      "INFO:2025-07-08,15:20:14 || radiative_transfer_engine.py:runSimulations() | Flushing netCDF to disk\n",
      "INFO:2025-07-08,15:20:14 || common.py:__call__() |  50.00% simulations complete (elapsed: 0:00:02.768149, rate: 0:00:00.276815, eta: 0:00:04.152223)\n",
      "INFO:2025-07-08,15:20:14 || radiative_transfer_engine.py:runSimulations() | Flushing netCDF to disk\n",
      "INFO:2025-07-08,15:20:15 || common.py:__call__() |  60.00% simulations complete (elapsed: 0:00:03.296599, rate: 0:00:00.329660, eta: 0:00:03.296599)\n",
      "INFO:2025-07-08,15:20:15 || radiative_transfer_engine.py:runSimulations() | Flushing netCDF to disk\n",
      "INFO:2025-07-08,15:20:15 || common.py:__call__() |  70.00% simulations complete (elapsed: 0:00:03.347710, rate: 0:00:00.334771, eta: 0:00:02.231807)\n",
      "INFO:2025-07-08,15:20:15 || radiative_transfer_engine.py:runSimulations() | Flushing netCDF to disk\n",
      "INFO:2025-07-08,15:20:15 || common.py:__call__() |  80.00% simulations complete (elapsed: 0:00:03.396394, rate: 0:00:00.339639, eta: 0:00:01.455597)\n",
      "INFO:2025-07-08,15:20:15 || radiative_transfer_engine.py:runSimulations() | Flushing netCDF to disk\n",
      "INFO:2025-07-08,15:20:15 || common.py:__call__() |  90.00% simulations complete (elapsed: 0:00:03.946926, rate: 0:00:00.394693, eta: 0:00:00.986732)\n",
      "INFO:2025-07-08,15:20:15 || radiative_transfer_engine.py:runSimulations() | Flushing netCDF to disk\n",
      "INFO:2025-07-08,15:20:16 || common.py:__call__() | 100.00% simulations complete (elapsed: 0:00:04.459773, rate: 0:00:00.445977, eta: 0:00:00.495530)\n",
      "INFO:2025-07-08,15:20:16 || radiative_transfer_engine.py:runSimulations() | Flushing netCDF to disk\n",
      "INFO:2025-07-08,15:20:16 || radiative_transfer_engine.py:runSimulations() | Running any post-sim functions\n",
      "INFO:2025-07-08,15:20:16 || radiative_transfer_engine.py:runSimulations() | Saving post-sim data to index zero of all dimensions except wl\n",
      "INFO:2025-07-08,15:20:16 || luts.py:load() | Loading LUT into memory\n",
      "WARNING:2025-07-08,15:20:16 || luts.py:load() | thermal_upwelling is fully NaN, leaving as-is\n",
      "WARNING:2025-07-08,15:20:16 || luts.py:load() | thermal_downwelling is fully NaN, leaving as-is\n",
      "INFO:2025-07-08,15:20:16 || sRTMnet.py:preSim() | Interpolating simulator quantities to emulator size\n",
      "INFO:2025-07-08,15:20:16 || sRTMnet.py:preSim() | Loading and predicting with emulator\n",
      "INFO:2025-07-08,15:20:17 || sRTMnet.py:preSim() | Saving intermediary prediction results to: /Users/bgreenbe/.isofit/neon_subset/output/NIS01_20210403_173647/lut_h2o/sRTMnet.predicts.nc\n",
      "INFO:2025-07-08,15:20:17 || radiative_transfer_engine.py:runSimulations() | Saving pre-sim data to index zero of all dimensions except wl\n",
      "INFO:2025-07-08,15:20:18 || radiative_transfer_engine.py:runSimulations() | Executing parallel simulations\n",
      "\u001b[36m(streamSimulation pid=17119)\u001b[0m INFO:2025-07-08,15:20:18 ||| Loading LUT into memory\n",
      "INFO:2025-07-08,15:20:18 || common.py:__call__() |  20.00% simulations complete (elapsed: 0:00:00.133107, rate: 0:00:00.013311, eta: 0:00:01.197963)\n",
      "INFO:2025-07-08,15:20:18 || radiative_transfer_engine.py:runSimulations() | Flushing netCDF to disk\n",
      "INFO:2025-07-08,15:20:18 || common.py:__call__() |  30.00% simulations complete (elapsed: 0:00:00.190843, rate: 0:00:00.019084, eta: 0:00:00.763372)\n",
      "INFO:2025-07-08,15:20:18 || radiative_transfer_engine.py:runSimulations() | Flushing netCDF to disk\n",
      "\u001b[36m(streamSimulation pid=17119)\u001b[0m INFO:2025-07-08,15:20:18 ||| Loading LUT into memory\n",
      "INFO:2025-07-08,15:20:18 || common.py:__call__() |  40.00% simulations complete (elapsed: 0:00:00.242991, rate: 0:00:00.024299, eta: 0:00:00.566979)\n",
      "INFO:2025-07-08,15:20:18 || radiative_transfer_engine.py:runSimulations() | Flushing netCDF to disk\n",
      "INFO:2025-07-08,15:20:18 || common.py:__call__() |  50.00% simulations complete (elapsed: 0:00:00.291772, rate: 0:00:00.029177, eta: 0:00:00.437658)\n",
      "INFO:2025-07-08,15:20:18 || radiative_transfer_engine.py:runSimulations() | Flushing netCDF to disk\n",
      "INFO:2025-07-08,15:20:18 || common.py:__call__() |  60.00% simulations complete (elapsed: 0:00:00.343262, rate: 0:00:00.034326, eta: 0:00:00.343262)\n",
      "INFO:2025-07-08,15:20:18 || radiative_transfer_engine.py:runSimulations() | Flushing netCDF to disk\n",
      "INFO:2025-07-08,15:20:18 || common.py:__call__() |  70.00% simulations complete (elapsed: 0:00:00.392020, rate: 0:00:00.039202, eta: 0:00:00.261347)\n",
      "INFO:2025-07-08,15:20:18 || radiative_transfer_engine.py:runSimulations() | Flushing netCDF to disk\n",
      "INFO:2025-07-08,15:20:18 || common.py:__call__() |  80.00% simulations complete (elapsed: 0:00:00.437945, rate: 0:00:00.043794, eta: 0:00:00.187691)\n",
      "INFO:2025-07-08,15:20:18 || radiative_transfer_engine.py:runSimulations() | Flushing netCDF to disk\n",
      "INFO:2025-07-08,15:20:18 || common.py:__call__() |  90.00% simulations complete (elapsed: 0:00:00.481330, rate: 0:00:00.048133, eta: 0:00:00.120332)\n",
      "INFO:2025-07-08,15:20:18 || radiative_transfer_engine.py:runSimulations() | Flushing netCDF to disk\n",
      "INFO:2025-07-08,15:20:18 || common.py:__call__() | 100.00% simulations complete (elapsed: 0:00:00.522997, rate: 0:00:00.052300, eta: 0:00:00.058111)\n",
      "INFO:2025-07-08,15:20:18 || radiative_transfer_engine.py:runSimulations() | Flushing netCDF to disk\n",
      "INFO:2025-07-08,15:20:18 || radiative_transfer_engine.py:runSimulations() | Running any post-sim functions\n",
      "INFO:2025-07-08,15:20:18 || luts.py:load() | Loading LUT into memory\n",
      "WARNING:2025-07-08,15:20:18 || luts.py:load() | thermal_upwelling is fully NaN, leaving as-is\n",
      "WARNING:2025-07-08,15:20:18 || luts.py:load() | thermal_downwelling is fully NaN, leaving as-is\n",
      "INFO:2025-07-08,15:20:18 || isofit.py:run() | Beginning 420 inversions in 40 chunks using 4 cores\n",
      "WARNING: All log messages before absl::InitializeLog() is called are written to STDERR\n",
      "I0000 00:00:1752013219.280426 2663633 chttp2_transport.cc:1182] ipv4:127.0.0.1:64327: Got goaway [2] err=UNAVAILABLE:GOAWAY received; Error code: 2; Debug Text: Cancelling all calls {grpc_status:14, http2_error:2, created_time:\"2025-07-08T15:20:19.280425-07:00\", file_line:1171, file:\"external/com_github_grpc_grpc/src/core/ext/transport/chttp2/transport/chttp2_transport.cc\"}\n",
      "\u001b[36m(Worker pid=17157)\u001b[0m INFO:2025-07-08,15:20:20 ||| Worker 0 completed 1/~105.0:: 0.95% complete\n",
      "\u001b[36m(Worker pid=17157)\u001b[0m INFO:2025-07-08,15:20:23 ||| Worker at start location (42,0) completed 10/11\n",
      "\u001b[36m(Worker pid=17158)\u001b[0m INFO:2025-07-08,15:20:24 ||| Worker 3 completed 11/~105.0:: 10.48% complete\u001b[32m [repeated 7x across cluster] (Ray deduplicates logs by default. Set RAY_DEDUP_LOGS=0 to disable log deduplication, or see https://docs.ray.io/en/master/ray-observability/user-guides/configure-logging.html#log-deduplication for more options.)\u001b[0m\n",
      "\u001b[36m(Worker pid=17159)\u001b[0m INFO:2025-07-08,15:20:29 ||| Worker at start location (95,0) completed 9/10\u001b[32m [repeated 8x across cluster]\u001b[0m\n",
      "\u001b[36m(Worker pid=17158)\u001b[0m INFO:2025-07-08,15:20:31 ||| Worker 3 completed 33/~105.0:: 31.43% complete\u001b[32m [repeated 8x across cluster]\u001b[0m\n",
      "\u001b[36m(Worker pid=17157)\u001b[0m INFO:2025-07-08,15:20:36 ||| Worker at start location (192,0) completed 9/10\u001b[32m [repeated 8x across cluster]\u001b[0m\n",
      "\u001b[36m(Worker pid=17158)\u001b[0m INFO:2025-07-08,15:20:37 ||| Worker 3 completed 55/~105.0:: 52.38% complete\u001b[32m [repeated 8x across cluster]\u001b[0m\n",
      "\u001b[36m(Worker pid=17159)\u001b[0m INFO:2025-07-08,15:20:43 ||| Worker at start location (268,0) completed 10/11\u001b[32m [repeated 8x across cluster]\u001b[0m\n",
      "\u001b[36m(Worker pid=17158)\u001b[0m INFO:2025-07-08,15:20:44 ||| Worker 3 completed 77/~105.0:: 73.33% complete\u001b[32m [repeated 8x across cluster]\u001b[0m\n",
      "\u001b[36m(Worker pid=17158)\u001b[0m INFO:2025-07-08,15:20:47 ||| Worker at start location (343,0) completed 10/11\u001b[32m [repeated 7x across cluster]\u001b[0m\n",
      "\u001b[36m(Worker pid=17158)\u001b[0m INFO:2025-07-08,15:20:48 ||| Worker 3 completed 88/~105.0:: 83.81% complete\u001b[32m [repeated 4x across cluster]\u001b[0m\n",
      "\u001b[36m(Worker pid=17160)\u001b[0m INFO:2025-07-08,15:20:53 ||| Worker at start location (397,0) completed 10/11\u001b[32m [repeated 5x across cluster]\u001b[0m\n",
      "INFO:2025-07-08,15:20:53 || isofit.py:run() | Inversions complete.  34.78s total, 12.0769 spectra/s, 3.0192 spectra/s/core\n",
      "INFO:2025-07-08,15:20:53 || apply_oe.py:apply_oe() | Full (non-aerosol) LUTs:\n",
      "INFO:2025-07-08,15:20:53 || apply_oe.py:apply_oe() | Elevation: None\n",
      "INFO:2025-07-08,15:20:53 || apply_oe.py:apply_oe() | To-sensor zenith: [0.9608 2.9675]\n",
      "INFO:2025-07-08,15:20:53 || apply_oe.py:apply_oe() | To-sun zenith: None\n",
      "INFO:2025-07-08,15:20:53 || apply_oe.py:apply_oe() | Relative to-sun azimuth: [3.80000e-03 4.12002e+01 8.23965e+01]\n",
      "INFO:2025-07-08,15:20:53 || apply_oe.py:apply_oe() | H2O Vapor: [0.6025 0.6627]\n",
      "INFO:2025-07-08,15:20:53 || apply_oe.py:apply_oe() | /Users/bgreenbe/.isofit/neon_subset/output/NIS01_20210403_173647/output/NIS01_20210403_173647_subs_state\n",
      "INFO:2025-07-08,15:20:53 || apply_oe.py:apply_oe() | Writing main configuration file.\n",
      "INFO:2025-07-08,15:20:53 || template_construction.py:load_climatology() | Loading Climatology\n",
      "INFO:2025-07-08,15:20:53 || template_construction.py:load_climatology() | Climatology Loaded.  Aerosol State Vector:\n",
      "{'AOT550': {'bounds': [0.001, 1.0], 'scale': 1, 'init': 0.1009, 'prior_sigma': 10.0, 'prior_mean': 0.1009}}\n",
      "Aerosol LUT Grid:\n",
      "{'AOT550': [0.001, 0.1009, 0.2008, 0.3007, 0.4006, 0.5005, 0.6004, 0.7003, 0.8002, 0.9001, 1.0]}\n",
      "Aerosol model path:/Users/bgreenbe/.isofit/data/aerosol_model.txt\n",
      "INFO:2025-07-08,15:20:53 || ini.py:toTemplate() | Saved converted json to: /Users/bgreenbe/.isofit/neon_subset/output/NIS01_20210403_173647/config/NIS01_20210403_173647_isofit.json.tmpl\n",
      "INFO:2025-07-08,15:20:53 || apply_oe.py:apply_oe() | Running ISOFIT with full LUT\n",
      "INFO:2025-07-08,15:20:53 || configs.py:create_new_config() | Loading config file: /Users/bgreenbe/.isofit/neon_subset/output/NIS01_20210403_173647/config/NIS01_20210403_173647_isofit.json\n",
      "INFO:2025-07-08,15:20:53 || configs.py:get_config_errors() | Checking config sections for configuration issues\n",
      "INFO:2025-07-08,15:20:53 || configs.py:get_config_errors() | Configuration file checks complete, no errors found.\n",
      "2025-07-08 15:20:53,541\tINFO worker.py:1747 -- Calling ray.init() again after it has already been called.\n",
      "INFO:2025-07-08,15:20:53 || isofit.py:run() | Building first forward model, will generate any necessary LUTs\n",
      "INFO:2025-07-08,15:20:53 || radiative_transfer_engine.py:__init__() | Loading from wavelength_file: /Users/bgreenbe/.isofit/neon_subset/output/NIS01_20210403_173647/data/wavelengths.txt\n",
      "INFO:2025-07-08,15:20:53 || radiative_transfer_engine.py:__init__() | No LUT store found, beginning initialization and simulations\n",
      "INFO:2025-07-08,15:20:53 || radiative_transfer_engine.py:__init__() | Initializing LUT file\n",
      "INFO:2025-07-08,15:20:53 || radiative_transfer_engine.py:runSimulations() | Running any pre-sim functions\n",
      "INFO:2025-07-08,15:20:53 || sRTMnet.py:preSim() | Creating a simulator configuration\n",
      "INFO:2025-07-08,15:20:53 || sRTMnet.py:preSim() | Building simulator and executing (6S)\n",
      "INFO:2025-07-08,15:20:53 || radiative_transfer_engine.py:__init__() | No LUT store found, beginning initialization and simulations\n",
      "INFO:2025-07-08,15:20:53 || radiative_transfer_engine.py:__init__() | Initializing LUT file\n",
      "INFO:2025-07-08,15:20:53 || radiative_transfer_engine.py:runSimulations() | Running any pre-sim functions\n",
      "INFO:2025-07-08,15:20:53 || radiative_transfer_engine.py:runSimulations() | Executing parallel simulations\n",
      "INFO:2025-07-08,15:20:59 || common.py:__call__() |  10.61% simulations complete (elapsed: 0:00:06.067500, rate: 0:00:00.045966, eta: 0:00:54.607500)\n",
      "INFO:2025-07-08,15:20:59 || radiative_transfer_engine.py:runSimulations() | Flushing netCDF to disk\n",
      "INFO:2025-07-08,15:21:03 || common.py:__call__() |  20.45% simulations complete (elapsed: 0:00:10.271446, rate: 0:00:00.077814, eta: 0:00:41.085784)\n",
      "INFO:2025-07-08,15:21:03 || radiative_transfer_engine.py:runSimulations() | Flushing netCDF to disk\n",
      "INFO:2025-07-08,15:21:08 || common.py:__call__() |  30.30% simulations complete (elapsed: 0:00:14.459419, rate: 0:00:00.109541, eta: 0:00:33.738644)\n",
      "INFO:2025-07-08,15:21:08 || radiative_transfer_engine.py:runSimulations() | Flushing netCDF to disk\n",
      "INFO:2025-07-08,15:21:13 || common.py:__call__() |  40.15% simulations complete (elapsed: 0:00:19.976911, rate: 0:00:00.151340, eta: 0:00:29.965367)\n",
      "INFO:2025-07-08,15:21:13 || radiative_transfer_engine.py:runSimulations() | Flushing netCDF to disk\n",
      "INFO:2025-07-08,15:21:17 || common.py:__call__() |  50.00% simulations complete (elapsed: 0:00:24.268372, rate: 0:00:00.183851, eta: 0:00:24.268372)\n",
      "INFO:2025-07-08,15:21:17 || radiative_transfer_engine.py:runSimulations() | Flushing netCDF to disk\n",
      "INFO:2025-07-08,15:21:21 || common.py:__call__() |  60.61% simulations complete (elapsed: 0:00:28.106960, rate: 0:00:00.212932, eta: 0:00:18.737973)\n",
      "INFO:2025-07-08,15:21:21 || radiative_transfer_engine.py:runSimulations() | Flushing netCDF to disk\n",
      "INFO:2025-07-08,15:21:27 || common.py:__call__() |  70.45% simulations complete (elapsed: 0:00:33.346920, rate: 0:00:00.252628, eta: 0:00:14.291537)\n",
      "INFO:2025-07-08,15:21:27 || radiative_transfer_engine.py:runSimulations() | Flushing netCDF to disk\n",
      "INFO:2025-07-08,15:21:31 || common.py:__call__() |  80.30% simulations complete (elapsed: 0:00:37.560121, rate: 0:00:00.284546, eta: 0:00:09.390030)\n",
      "INFO:2025-07-08,15:21:31 || radiative_transfer_engine.py:runSimulations() | Flushing netCDF to disk\n",
      "INFO:2025-07-08,15:21:35 || common.py:__call__() |  90.15% simulations complete (elapsed: 0:00:42.008716, rate: 0:00:00.318248, eta: 0:00:04.667635)\n",
      "INFO:2025-07-08,15:21:35 || radiative_transfer_engine.py:runSimulations() | Flushing netCDF to disk\n",
      "INFO:2025-07-08,15:21:40 || common.py:__call__() | 100.00% simulations complete (elapsed: 0:00:46.415069, rate: 0:00:00.351629, eta: 0:00:00)\n",
      "INFO:2025-07-08,15:21:40 || radiative_transfer_engine.py:runSimulations() | Flushing netCDF to disk\n",
      "INFO:2025-07-08,15:21:40 || radiative_transfer_engine.py:runSimulations() | Running any post-sim functions\n",
      "INFO:2025-07-08,15:21:40 || radiative_transfer_engine.py:runSimulations() | Saving post-sim data to index zero of all dimensions except wl\n",
      "INFO:2025-07-08,15:21:40 || luts.py:load() | Loading LUT into memory\n",
      "WARNING:2025-07-08,15:21:40 || luts.py:load() | thermal_upwelling is fully NaN, leaving as-is\n",
      "WARNING:2025-07-08,15:21:40 || luts.py:load() | thermal_downwelling is fully NaN, leaving as-is\n",
      "INFO:2025-07-08,15:21:40 || sRTMnet.py:preSim() | Interpolating simulator quantities to emulator size\n",
      "INFO:2025-07-08,15:21:40 || sRTMnet.py:preSim() | Loading and predicting with emulator\n",
      "INFO:2025-07-08,15:21:43 || sRTMnet.py:preSim() | Saving intermediary prediction results to: /Users/bgreenbe/.isofit/neon_subset/output/NIS01_20210403_173647/lut_full/sRTMnet.predicts.nc\n",
      "INFO:2025-07-08,15:21:43 || radiative_transfer_engine.py:runSimulations() | Saving pre-sim data to index zero of all dimensions except wl\n",
      "INFO:2025-07-08,15:21:43 || radiative_transfer_engine.py:runSimulations() | Executing parallel simulations\n",
      "INFO:2025-07-08,15:21:43 || common.py:__call__() |  10.61% simulations complete (elapsed: 0:00:00.286329, rate: 0:00:00.002169, eta: 0:00:02.576961)\n",
      "INFO:2025-07-08,15:21:43 || radiative_transfer_engine.py:runSimulations() | Flushing netCDF to disk\n",
      "INFO:2025-07-08,15:21:44 || common.py:__call__() |  20.45% simulations complete (elapsed: 0:00:00.443106, rate: 0:00:00.003357, eta: 0:00:01.772424)\n",
      "INFO:2025-07-08,15:21:44 || radiative_transfer_engine.py:runSimulations() | Flushing netCDF to disk\n",
      "INFO:2025-07-08,15:21:44 || common.py:__call__() |  30.30% simulations complete (elapsed: 0:00:00.603308, rate: 0:00:00.004571, eta: 0:00:01.407719)\n",
      "INFO:2025-07-08,15:21:44 || radiative_transfer_engine.py:runSimulations() | Flushing netCDF to disk\n",
      "INFO:2025-07-08,15:21:44 || common.py:__call__() |  40.15% simulations complete (elapsed: 0:00:00.810682, rate: 0:00:00.006142, eta: 0:00:01.216023)\n",
      "INFO:2025-07-08,15:21:44 || radiative_transfer_engine.py:runSimulations() | Flushing netCDF to disk\n",
      "INFO:2025-07-08,15:21:44 || common.py:__call__() |  50.00% simulations complete (elapsed: 0:00:00.967955, rate: 0:00:00.007333, eta: 0:00:00.967955)\n",
      "INFO:2025-07-08,15:21:44 || radiative_transfer_engine.py:runSimulations() | Flushing netCDF to disk\n",
      "INFO:2025-07-08,15:21:44 || common.py:__call__() |  60.61% simulations complete (elapsed: 0:00:01.137875, rate: 0:00:00.008620, eta: 0:00:00.758583)\n",
      "INFO:2025-07-08,15:21:44 || radiative_transfer_engine.py:runSimulations() | Flushing netCDF to disk\n",
      "INFO:2025-07-08,15:21:45 || common.py:__call__() |  70.45% simulations complete (elapsed: 0:00:01.338172, rate: 0:00:00.010138, eta: 0:00:00.573502)\n",
      "INFO:2025-07-08,15:21:45 || radiative_transfer_engine.py:runSimulations() | Flushing netCDF to disk\n",
      "INFO:2025-07-08,15:21:45 || common.py:__call__() |  80.30% simulations complete (elapsed: 0:00:01.500123, rate: 0:00:00.011365, eta: 0:00:00.375031)\n",
      "INFO:2025-07-08,15:21:45 || radiative_transfer_engine.py:runSimulations() | Flushing netCDF to disk\n",
      "INFO:2025-07-08,15:21:45 || common.py:__call__() |  90.15% simulations complete (elapsed: 0:00:01.657305, rate: 0:00:00.012555, eta: 0:00:00.184145)\n",
      "INFO:2025-07-08,15:21:45 || radiative_transfer_engine.py:runSimulations() | Flushing netCDF to disk\n",
      "INFO:2025-07-08,15:21:45 || common.py:__call__() | 100.00% simulations complete (elapsed: 0:00:01.823216, rate: 0:00:00.013812, eta: 0:00:00)\n",
      "INFO:2025-07-08,15:21:45 || radiative_transfer_engine.py:runSimulations() | Flushing netCDF to disk\n",
      "INFO:2025-07-08,15:21:45 || radiative_transfer_engine.py:runSimulations() | Running any post-sim functions\n",
      "INFO:2025-07-08,15:21:45 || luts.py:load() | Loading LUT into memory\n",
      "WARNING:2025-07-08,15:21:45 || luts.py:load() | thermal_upwelling is fully NaN, leaving as-is\n",
      "WARNING:2025-07-08,15:21:45 || luts.py:load() | thermal_downwelling is fully NaN, leaving as-is\n",
      "INFO:2025-07-08,15:21:45 || isofit.py:run() | Beginning 420 inversions in 40 chunks using 4 cores\n",
      "I0000 00:00:1752013306.660474 2663633 chttp2_transport.cc:1182] ipv4:127.0.0.1:64423: Got goaway [2] err=UNAVAILABLE:GOAWAY received; Error code: 2; Debug Text: Cancelling all calls {file:\"external/com_github_grpc_grpc/src/core/ext/transport/chttp2/transport/chttp2_transport.cc\", file_line:1171, created_time:\"2025-07-08T15:21:46.660474-07:00\", http2_error:2, grpc_status:14}\n",
      "I0000 00:00:1752013306.660734 2663633 chttp2_transport.cc:1182] ipv4:127.0.0.1:64428: Got goaway [2] err=UNAVAILABLE:GOAWAY received; Error code: 2; Debug Text: Cancelling all calls {grpc_status:14, http2_error:2, created_time:\"2025-07-08T15:21:46.660733-07:00\", file_line:1171, file:\"external/com_github_grpc_grpc/src/core/ext/transport/chttp2/transport/chttp2_transport.cc\"}\n",
      "\u001b[36m(Worker pid=17536)\u001b[0m ERROR:2025-07-08,15:21:47 ||| \n",
      "\u001b[36m(Worker pid=17536)\u001b[0m                     Encountered the following ValueError in (row,col) (32,0).\n",
      "\u001b[36m(Worker pid=17536)\u001b[0m                     Results for this pixel will be all zeros.\n",
      "\u001b[36m(Worker pid=17536)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17536)\u001b[0m Traceback (most recent call last):\n",
      "\u001b[36m(Worker pid=17536)\u001b[0m   File \"/Users/bgreenbe/Github/isofit/isofit/core/isofit.py\", line 263, in run_set_of_spectra\n",
      "\u001b[36m(Worker pid=17536)\u001b[0m     self.io.write_spectrum(row, col, states, self.fm, self.iv)\n",
      "\u001b[36m(Worker pid=17536)\u001b[0m   File \"/Users/bgreenbe/Github/isofit/isofit/core/fileio.py\", line 747, in write_spectrum\n",
      "\u001b[36m(Worker pid=17536)\u001b[0m     to_write = self.build_output(states, self.current_input_data, fm, iv)\n",
      "\u001b[36m(Worker pid=17536)\u001b[0m   File \"/Users/bgreenbe/Github/isofit/isofit/core/fileio.py\", line 684, in build_output\n",
      "\u001b[36m(Worker pid=17536)\u001b[0m     rfl_alg_opt, Ls, coeffs = invert_algebraic(\n",
      "\u001b[36m(Worker pid=17536)\u001b[0m ValueError: not enough values to unpack (expected 3, got 2)\n",
      "\u001b[36m(Worker pid=17536)\u001b[0m INFO:2025-07-08,15:21:47 ||| Worker 0 completed 1/~105.0:: 0.95% complete\u001b[32m [repeated 4x across cluster]\u001b[0m\n",
      "\u001b[36m(Worker pid=17159)\u001b[0m INFO:2025-07-08,15:20:53 ||| Worker at start location (408,0) completed 10/11\u001b[32m [repeated 2x across cluster]\u001b[0m\n",
      "\u001b[36m(Worker pid=17537)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17535)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17538)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17536)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17535)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17537)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17538)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17536)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17537)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17535)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17538)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17536)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17535)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17537)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17538)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17537)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17536)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17535)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17538)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17537)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17536)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17535)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17538)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17537)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17536)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17535)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17538)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17538)\u001b[0m ERROR:2025-07-08,15:21:52 ||| \u001b[32m [repeated 27x across cluster]\u001b[0m\n",
      "\u001b[36m(Worker pid=17538)\u001b[0m                     Encountered the following ValueError in (row,col) (27,0).\u001b[32m [repeated 27x across cluster]\u001b[0m\n",
      "\u001b[36m(Worker pid=17538)\u001b[0m                     Results for this pixel will be all zeros.\u001b[32m [repeated 27x across cluster]\u001b[0m\n",
      "\u001b[36m(Worker pid=17538)\u001b[0m Traceback (most recent call last):\u001b[32m [repeated 27x across cluster]\u001b[0m\n",
      "\u001b[36m(Worker pid=17538)\u001b[0m   File \"/Users/bgreenbe/Github/isofit/isofit/core/isofit.py\", line 263, in run_set_of_spectra\u001b[32m [repeated 27x across cluster]\u001b[0m\n",
      "\u001b[36m(Worker pid=17538)\u001b[0m     self.io.write_spectrum(row, col, states, self.fm, self.iv)\u001b[32m [repeated 27x across cluster]\u001b[0m\n",
      "\u001b[36m(Worker pid=17538)\u001b[0m   File \"/Users/bgreenbe/Github/isofit/isofit/core/fileio.py\", line 747, in write_spectrum\u001b[32m [repeated 27x across cluster]\u001b[0m\n",
      "\u001b[36m(Worker pid=17538)\u001b[0m     to_write = self.build_output(states, self.current_input_data, fm, iv)\u001b[32m [repeated 27x across cluster]\u001b[0m\n",
      "\u001b[36m(Worker pid=17538)\u001b[0m   File \"/Users/bgreenbe/Github/isofit/isofit/core/fileio.py\", line 684, in build_output\u001b[32m [repeated 27x across cluster]\u001b[0m\n",
      "\u001b[36m(Worker pid=17538)\u001b[0m     rfl_alg_opt, Ls, coeffs = invert_algebraic(\u001b[32m [repeated 27x across cluster]\u001b[0m\n",
      "\u001b[36m(Worker pid=17538)\u001b[0m ValueError: not enough values to unpack (expected 3, got 2)\u001b[32m [repeated 27x across cluster]\u001b[0m\n",
      "\u001b[36m(Worker pid=17538)\u001b[0m INFO:2025-07-08,15:21:47 ||| Worker 1 completed 1/~105.0:: 0.95% complete\u001b[32m [repeated 3x across cluster]\u001b[0m\n",
      "\u001b[36m(Worker pid=17537)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17535)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17536)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17538)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17537)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17536)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17535)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17538)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17537)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17536)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17535)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17535)\u001b[0m INFO:2025-07-08,15:21:55 ||| Worker at start location (9,0) completed 9/10\n",
      "\u001b[36m(Worker pid=17538)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17537)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17536)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17535)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17538)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17535)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17537)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17536)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17538)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17537)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17535)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17536)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17538)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17537)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17537)\u001b[0m ERROR:2025-07-08,15:21:58 ||| \u001b[32m [repeated 25x across cluster]\u001b[0m\n",
      "\u001b[36m(Worker pid=17537)\u001b[0m                     Encountered the following ValueError in (row,col) (55,0).\u001b[32m [repeated 25x across cluster]\u001b[0m\n",
      "\u001b[36m(Worker pid=17537)\u001b[0m                     Results for this pixel will be all zeros.\u001b[32m [repeated 25x across cluster]\u001b[0m\n",
      "\u001b[36m(Worker pid=17537)\u001b[0m Traceback (most recent call last):\u001b[32m [repeated 25x across cluster]\u001b[0m\n",
      "\u001b[36m(Worker pid=17537)\u001b[0m   File \"/Users/bgreenbe/Github/isofit/isofit/core/isofit.py\", line 263, in run_set_of_spectra\u001b[32m [repeated 25x across cluster]\u001b[0m\n",
      "\u001b[36m(Worker pid=17537)\u001b[0m     self.io.write_spectrum(row, col, states, self.fm, self.iv)\u001b[32m [repeated 25x across cluster]\u001b[0m\n",
      "\u001b[36m(Worker pid=17537)\u001b[0m   File \"/Users/bgreenbe/Github/isofit/isofit/core/fileio.py\", line 747, in write_spectrum\u001b[32m [repeated 25x across cluster]\u001b[0m\n",
      "\u001b[36m(Worker pid=17537)\u001b[0m     to_write = self.build_output(states, self.current_input_data, fm, iv)\u001b[32m [repeated 25x across cluster]\u001b[0m\n",
      "\u001b[36m(Worker pid=17537)\u001b[0m   File \"/Users/bgreenbe/Github/isofit/isofit/core/fileio.py\", line 684, in build_output\u001b[32m [repeated 25x across cluster]\u001b[0m\n",
      "\u001b[36m(Worker pid=17537)\u001b[0m     rfl_alg_opt, Ls, coeffs = invert_algebraic(\u001b[32m [repeated 25x across cluster]\u001b[0m\n",
      "\u001b[36m(Worker pid=17537)\u001b[0m ValueError: not enough values to unpack (expected 3, got 2)\u001b[32m [repeated 25x across cluster]\u001b[0m\n",
      "\u001b[36m(Worker pid=17538)\u001b[0m INFO:2025-07-08,15:21:57 ||| Worker 1 completed 12/~105.0:: 11.43% complete\u001b[32m [repeated 4x across cluster]\u001b[0m\n",
      "\u001b[36m(Worker pid=17535)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17536)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17538)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17535)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17537)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17536)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17538)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17537)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17535)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17536)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17538)\u001b[0m INFO:2025-07-08,15:21:56 ||| Worker at start location (31,0) completed 10/11\u001b[32m [repeated 3x across cluster]\u001b[0m\n",
      "\u001b[36m(Worker pid=17538)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17537)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17535)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17536)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17538)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17535)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17537)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17536)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17538)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17535)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17537)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17536)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17538)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17535)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17537)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17537)\u001b[0m ERROR:2025-07-08,15:22:03 ||| \u001b[32m [repeated 25x across cluster]\u001b[0m\n",
      "\u001b[36m(Worker pid=17537)\u001b[0m                     Encountered the following ValueError in (row,col) (61,0).\u001b[32m [repeated 25x across cluster]\u001b[0m\n",
      "\u001b[36m(Worker pid=17537)\u001b[0m                     Results for this pixel will be all zeros.\u001b[32m [repeated 25x across cluster]\u001b[0m\n",
      "\u001b[36m(Worker pid=17537)\u001b[0m Traceback (most recent call last):\u001b[32m [repeated 25x across cluster]\u001b[0m\n",
      "\u001b[36m(Worker pid=17537)\u001b[0m   File \"/Users/bgreenbe/Github/isofit/isofit/core/isofit.py\", line 263, in run_set_of_spectra\u001b[32m [repeated 25x across cluster]\u001b[0m\n",
      "\u001b[36m(Worker pid=17537)\u001b[0m     self.io.write_spectrum(row, col, states, self.fm, self.iv)\u001b[32m [repeated 25x across cluster]\u001b[0m\n",
      "\u001b[36m(Worker pid=17537)\u001b[0m   File \"/Users/bgreenbe/Github/isofit/isofit/core/fileio.py\", line 747, in write_spectrum\u001b[32m [repeated 25x across cluster]\u001b[0m\n",
      "\u001b[36m(Worker pid=17537)\u001b[0m     to_write = self.build_output(states, self.current_input_data, fm, iv)\u001b[32m [repeated 25x across cluster]\u001b[0m\n",
      "\u001b[36m(Worker pid=17537)\u001b[0m   File \"/Users/bgreenbe/Github/isofit/isofit/core/fileio.py\", line 684, in build_output\u001b[32m [repeated 25x across cluster]\u001b[0m\n",
      "\u001b[36m(Worker pid=17537)\u001b[0m     rfl_alg_opt, Ls, coeffs = invert_algebraic(\u001b[32m [repeated 25x across cluster]\u001b[0m\n",
      "\u001b[36m(Worker pid=17537)\u001b[0m ValueError: not enough values to unpack (expected 3, got 2)\u001b[32m [repeated 25x across cluster]\u001b[0m\n",
      "\u001b[36m(Worker pid=17536)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17538)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17535)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17535)\u001b[0m INFO:2025-07-08,15:22:03 ||| Worker 3 completed 21/~105.0:: 20.0% complete\n",
      "\u001b[36m(Worker pid=17537)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17536)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17538)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17535)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17537)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17536)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17538)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17535)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17538)\u001b[0m INFO:2025-07-08,15:22:05 ||| Worker at start location (85,0) completed 10/11\u001b[32m [repeated 4x across cluster]\u001b[0m\n",
      "\u001b[36m(Worker pid=17538)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17537)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17536)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17535)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17537)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17538)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17536)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17535)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17537)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17538)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17536)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17535)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17537)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17537)\u001b[0m ERROR:2025-07-08,15:22:08 ||| \u001b[32m [repeated 24x across cluster]\u001b[0m\n",
      "\u001b[36m(Worker pid=17537)\u001b[0m                     Encountered the following ValueError in (row,col) (99,0).\u001b[32m [repeated 24x across cluster]\u001b[0m\n",
      "\u001b[36m(Worker pid=17537)\u001b[0m                     Results for this pixel will be all zeros.\u001b[32m [repeated 24x across cluster]\u001b[0m\n",
      "\u001b[36m(Worker pid=17537)\u001b[0m Traceback (most recent call last):\u001b[32m [repeated 24x across cluster]\u001b[0m\n",
      "\u001b[36m(Worker pid=17537)\u001b[0m   File \"/Users/bgreenbe/Github/isofit/isofit/core/isofit.py\", line 263, in run_set_of_spectra\u001b[32m [repeated 24x across cluster]\u001b[0m\n",
      "\u001b[36m(Worker pid=17537)\u001b[0m     self.io.write_spectrum(row, col, states, self.fm, self.iv)\u001b[32m [repeated 24x across cluster]\u001b[0m\n",
      "\u001b[36m(Worker pid=17537)\u001b[0m   File \"/Users/bgreenbe/Github/isofit/isofit/core/fileio.py\", line 747, in write_spectrum\u001b[32m [repeated 24x across cluster]\u001b[0m\n",
      "\u001b[36m(Worker pid=17537)\u001b[0m     to_write = self.build_output(states, self.current_input_data, fm, iv)\u001b[32m [repeated 24x across cluster]\u001b[0m\n",
      "\u001b[36m(Worker pid=17537)\u001b[0m   File \"/Users/bgreenbe/Github/isofit/isofit/core/fileio.py\", line 684, in build_output\u001b[32m [repeated 24x across cluster]\u001b[0m\n",
      "\u001b[36m(Worker pid=17537)\u001b[0m     rfl_alg_opt, Ls, coeffs = invert_algebraic(\u001b[32m [repeated 24x across cluster]\u001b[0m\n",
      "\u001b[36m(Worker pid=17537)\u001b[0m ValueError: not enough values to unpack (expected 3, got 2)\u001b[32m [repeated 24x across cluster]\u001b[0m\n",
      "\u001b[36m(Worker pid=17538)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17536)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17535)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17536)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17536)\u001b[0m INFO:2025-07-08,15:22:06 ||| Worker 0 completed 23/~105.0:: 21.9% complete\u001b[32m [repeated 3x across cluster]\u001b[0m\n",
      "\u001b[36m(Worker pid=17537)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17538)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17535)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17536)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17538)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17537)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17535)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17536)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17537)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17538)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17535)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17535)\u001b[0m INFO:2025-07-08,15:22:11 ||| Worker at start location (95,0) completed 9/10\n",
      "\u001b[36m(Worker pid=17537)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17538)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17536)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17535)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17538)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17537)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17536)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17535)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17537)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17537)\u001b[0m ERROR:2025-07-08,15:22:13 ||| \u001b[32m [repeated 24x across cluster]\u001b[0m\n",
      "\u001b[36m(Worker pid=17537)\u001b[0m                     Encountered the following ValueError in (row,col) (105,0).\u001b[32m [repeated 24x across cluster]\u001b[0m\n",
      "\u001b[36m(Worker pid=17537)\u001b[0m                     Results for this pixel will be all zeros.\u001b[32m [repeated 24x across cluster]\u001b[0m\n",
      "\u001b[36m(Worker pid=17537)\u001b[0m Traceback (most recent call last):\u001b[32m [repeated 24x across cluster]\u001b[0m\n",
      "\u001b[36m(Worker pid=17537)\u001b[0m   File \"/Users/bgreenbe/Github/isofit/isofit/core/isofit.py\", line 263, in run_set_of_spectra\u001b[32m [repeated 24x across cluster]\u001b[0m\n",
      "\u001b[36m(Worker pid=17537)\u001b[0m     self.io.write_spectrum(row, col, states, self.fm, self.iv)\u001b[32m [repeated 24x across cluster]\u001b[0m\n",
      "\u001b[36m(Worker pid=17537)\u001b[0m   File \"/Users/bgreenbe/Github/isofit/isofit/core/fileio.py\", line 747, in write_spectrum\u001b[32m [repeated 24x across cluster]\u001b[0m\n",
      "\u001b[36m(Worker pid=17537)\u001b[0m     to_write = self.build_output(states, self.current_input_data, fm, iv)\u001b[32m [repeated 24x across cluster]\u001b[0m\n",
      "\u001b[36m(Worker pid=17537)\u001b[0m   File \"/Users/bgreenbe/Github/isofit/isofit/core/fileio.py\", line 684, in build_output\u001b[32m [repeated 24x across cluster]\u001b[0m\n",
      "\u001b[36m(Worker pid=17537)\u001b[0m     rfl_alg_opt, Ls, coeffs = invert_algebraic(\u001b[32m [repeated 24x across cluster]\u001b[0m\n",
      "\u001b[36m(Worker pid=17537)\u001b[0m ValueError: not enough values to unpack (expected 3, got 2)\u001b[32m [repeated 24x across cluster]\u001b[0m\n",
      "\u001b[36m(Worker pid=17538)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17536)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17535)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17538)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17537)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17536)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17535)\u001b[0m INFO:2025-07-08,15:22:12 ||| Worker 3 completed 31/~105.0:: 29.52% complete\n",
      "\u001b[36m(Worker pid=17535)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17537)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17537)\u001b[0m INFO:2025-07-08,15:22:15 ||| Worker 2 completed 34/~105.0:: 32.38% complete\n",
      "\u001b[36m(Worker pid=17538)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17536)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17535)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17537)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17538)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17536)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17535)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17537)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17536)\u001b[0m INFO:2025-07-08,15:22:14 ||| Worker at start location (117,0) completed 10/11\u001b[32m [repeated 3x across cluster]\u001b[0m\n",
      "\u001b[36m(Worker pid=17538)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17536)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17535)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17536)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17537)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17538)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17536)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17535)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17537)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17538)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17536)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17536)\u001b[0m ERROR:2025-07-08,15:22:18 ||| \u001b[32m [repeated 27x across cluster]\u001b[0m\n",
      "\u001b[36m(Worker pid=17536)\u001b[0m                     Encountered the following ValueError in (row,col) (166,0).\u001b[32m [repeated 27x across cluster]\u001b[0m\n",
      "\u001b[36m(Worker pid=17536)\u001b[0m                     Results for this pixel will be all zeros.\u001b[32m [repeated 27x across cluster]\u001b[0m\n",
      "\u001b[36m(Worker pid=17536)\u001b[0m Traceback (most recent call last):\u001b[32m [repeated 27x across cluster]\u001b[0m\n",
      "\u001b[36m(Worker pid=17536)\u001b[0m   File \"/Users/bgreenbe/Github/isofit/isofit/core/isofit.py\", line 263, in run_set_of_spectra\u001b[32m [repeated 27x across cluster]\u001b[0m\n",
      "\u001b[36m(Worker pid=17536)\u001b[0m     self.io.write_spectrum(row, col, states, self.fm, self.iv)\u001b[32m [repeated 27x across cluster]\u001b[0m\n",
      "\u001b[36m(Worker pid=17536)\u001b[0m   File \"/Users/bgreenbe/Github/isofit/isofit/core/fileio.py\", line 747, in write_spectrum\u001b[32m [repeated 27x across cluster]\u001b[0m\n",
      "\u001b[36m(Worker pid=17536)\u001b[0m     to_write = self.build_output(states, self.current_input_data, fm, iv)\u001b[32m [repeated 27x across cluster]\u001b[0m\n",
      "\u001b[36m(Worker pid=17536)\u001b[0m   File \"/Users/bgreenbe/Github/isofit/isofit/core/fileio.py\", line 684, in build_output\u001b[32m [repeated 27x across cluster]\u001b[0m\n",
      "\u001b[36m(Worker pid=17536)\u001b[0m     rfl_alg_opt, Ls, coeffs = invert_algebraic(\u001b[32m [repeated 27x across cluster]\u001b[0m\n",
      "\u001b[36m(Worker pid=17536)\u001b[0m ValueError: not enough values to unpack (expected 3, got 2)\u001b[32m [repeated 27x across cluster]\u001b[0m\n",
      "\u001b[36m(Worker pid=17535)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17537)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17538)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17536)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17535)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17537)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17538)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17536)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17536)\u001b[0m INFO:2025-07-08,15:22:15 ||| Worker 0 completed 34/~105.0:: 32.38% complete\u001b[32m [repeated 2x across cluster]\u001b[0m\n",
      "\u001b[36m(Worker pid=17535)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17537)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17538)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17536)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17535)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17537)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17538)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17535)\u001b[0m INFO:2025-07-08,15:22:20 ||| Worker at start location (139,0) completed 10/11\n",
      "\u001b[36m(Worker pid=17535)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17536)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17537)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17538)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17538)\u001b[0m INFO:2025-07-08,15:22:22 ||| Worker at start location (149,0) completed 9/10\n",
      "\u001b[36m(Worker pid=17535)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17536)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17537)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17538)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17535)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17536)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17536)\u001b[0m ERROR:2025-07-08,15:22:23 ||| \u001b[32m [repeated 25x across cluster]\u001b[0m\n",
      "\u001b[36m(Worker pid=17536)\u001b[0m                     Encountered the following ValueError in (row,col) (193,0).\u001b[32m [repeated 25x across cluster]\u001b[0m\n",
      "\u001b[36m(Worker pid=17536)\u001b[0m                     Results for this pixel will be all zeros.\u001b[32m [repeated 25x across cluster]\u001b[0m\n",
      "\u001b[36m(Worker pid=17536)\u001b[0m Traceback (most recent call last):\u001b[32m [repeated 25x across cluster]\u001b[0m\n",
      "\u001b[36m(Worker pid=17536)\u001b[0m   File \"/Users/bgreenbe/Github/isofit/isofit/core/isofit.py\", line 263, in run_set_of_spectra\u001b[32m [repeated 25x across cluster]\u001b[0m\n",
      "\u001b[36m(Worker pid=17536)\u001b[0m     self.io.write_spectrum(row, col, states, self.fm, self.iv)\u001b[32m [repeated 25x across cluster]\u001b[0m\n",
      "\u001b[36m(Worker pid=17536)\u001b[0m   File \"/Users/bgreenbe/Github/isofit/isofit/core/fileio.py\", line 747, in write_spectrum\u001b[32m [repeated 25x across cluster]\u001b[0m\n",
      "\u001b[36m(Worker pid=17536)\u001b[0m     to_write = self.build_output(states, self.current_input_data, fm, iv)\u001b[32m [repeated 25x across cluster]\u001b[0m\n",
      "\u001b[36m(Worker pid=17536)\u001b[0m   File \"/Users/bgreenbe/Github/isofit/isofit/core/fileio.py\", line 684, in build_output\u001b[32m [repeated 25x across cluster]\u001b[0m\n",
      "\u001b[36m(Worker pid=17536)\u001b[0m     rfl_alg_opt, Ls, coeffs = invert_algebraic(\u001b[32m [repeated 25x across cluster]\u001b[0m\n",
      "\u001b[36m(Worker pid=17536)\u001b[0m ValueError: not enough values to unpack (expected 3, got 2)\u001b[32m [repeated 25x across cluster]\u001b[0m\n",
      "\u001b[36m(Worker pid=17537)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17538)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17535)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17536)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17538)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17537)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17535)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17536)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17538)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17537)\u001b[0m INFO:2025-07-08,15:22:24 ||| Worker 2 completed 45/~105.0:: 42.86% complete\u001b[32m [repeated 4x across cluster]\u001b[0m\n",
      "\u001b[36m(Worker pid=17537)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17538)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17535)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17536)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17537)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17538)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17535)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17536)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17537)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17535)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17538)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17536)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17537)\u001b[0m INFO:2025-07-08,15:22:23 ||| Worker at start location (160,0) completed 10/11\u001b[32m [repeated 2x across cluster]\u001b[0m\n",
      "\u001b[36m(Worker pid=17537)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17536)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17535)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17538)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17537)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17537)\u001b[0m ERROR:2025-07-08,15:22:28 ||| \u001b[32m [repeated 26x across cluster]\u001b[0m\n",
      "\u001b[36m(Worker pid=17537)\u001b[0m                     Encountered the following ValueError in (row,col) (210,0).\u001b[32m [repeated 26x across cluster]\u001b[0m\n",
      "\u001b[36m(Worker pid=17537)\u001b[0m                     Results for this pixel will be all zeros.\u001b[32m [repeated 26x across cluster]\u001b[0m\n",
      "\u001b[36m(Worker pid=17537)\u001b[0m Traceback (most recent call last):\u001b[32m [repeated 26x across cluster]\u001b[0m\n",
      "\u001b[36m(Worker pid=17537)\u001b[0m   File \"/Users/bgreenbe/Github/isofit/isofit/core/isofit.py\", line 263, in run_set_of_spectra\u001b[32m [repeated 26x across cluster]\u001b[0m\n",
      "\u001b[36m(Worker pid=17537)\u001b[0m     self.io.write_spectrum(row, col, states, self.fm, self.iv)\u001b[32m [repeated 26x across cluster]\u001b[0m\n",
      "\u001b[36m(Worker pid=17537)\u001b[0m   File \"/Users/bgreenbe/Github/isofit/isofit/core/fileio.py\", line 747, in write_spectrum\u001b[32m [repeated 26x across cluster]\u001b[0m\n",
      "\u001b[36m(Worker pid=17537)\u001b[0m     to_write = self.build_output(states, self.current_input_data, fm, iv)\u001b[32m [repeated 26x across cluster]\u001b[0m\n",
      "\u001b[36m(Worker pid=17537)\u001b[0m   File \"/Users/bgreenbe/Github/isofit/isofit/core/fileio.py\", line 684, in build_output\u001b[32m [repeated 26x across cluster]\u001b[0m\n",
      "\u001b[36m(Worker pid=17537)\u001b[0m     rfl_alg_opt, Ls, coeffs = invert_algebraic(\u001b[32m [repeated 26x across cluster]\u001b[0m\n",
      "\u001b[36m(Worker pid=17537)\u001b[0m ValueError: not enough values to unpack (expected 3, got 2)\u001b[32m [repeated 26x across cluster]\u001b[0m\n",
      "\u001b[36m(Worker pid=17536)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17535)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17538)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17537)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17538)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17535)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17536)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17537)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17535)\u001b[0m INFO:2025-07-08,15:22:30 ||| Worker 3 completed 53/~105.0:: 50.48% complete\n",
      "\u001b[36m(Worker pid=17538)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17538)\u001b[0m INFO:2025-07-08,15:22:30 ||| Worker 1 completed 54/~105.0:: 51.43% complete\n",
      "\u001b[36m(Worker pid=17535)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17536)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17538)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17537)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17536)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17535)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17537)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17538)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17536)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17535)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17537)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17537)\u001b[0m INFO:2025-07-08,15:22:32 ||| Worker at start location (214,0) completed 10/11\u001b[32m [repeated 4x across cluster]\u001b[0m\n",
      "\u001b[36m(Worker pid=17538)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17536)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17535)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17537)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17538)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17538)\u001b[0m ERROR:2025-07-08,15:22:33 ||| \u001b[32m [repeated 25x across cluster]\u001b[0m\n",
      "\u001b[36m(Worker pid=17538)\u001b[0m                     Encountered the following ValueError in (row,col) (230,0).\u001b[32m [repeated 25x across cluster]\u001b[0m\n",
      "\u001b[36m(Worker pid=17538)\u001b[0m                     Results for this pixel will be all zeros.\u001b[32m [repeated 25x across cluster]\u001b[0m\n",
      "\u001b[36m(Worker pid=17538)\u001b[0m Traceback (most recent call last):\u001b[32m [repeated 25x across cluster]\u001b[0m\n",
      "\u001b[36m(Worker pid=17538)\u001b[0m   File \"/Users/bgreenbe/Github/isofit/isofit/core/isofit.py\", line 263, in run_set_of_spectra\u001b[32m [repeated 25x across cluster]\u001b[0m\n",
      "\u001b[36m(Worker pid=17538)\u001b[0m     self.io.write_spectrum(row, col, states, self.fm, self.iv)\u001b[32m [repeated 25x across cluster]\u001b[0m\n",
      "\u001b[36m(Worker pid=17538)\u001b[0m   File \"/Users/bgreenbe/Github/isofit/isofit/core/fileio.py\", line 747, in write_spectrum\u001b[32m [repeated 25x across cluster]\u001b[0m\n",
      "\u001b[36m(Worker pid=17538)\u001b[0m     to_write = self.build_output(states, self.current_input_data, fm, iv)\u001b[32m [repeated 25x across cluster]\u001b[0m\n",
      "\u001b[36m(Worker pid=17538)\u001b[0m   File \"/Users/bgreenbe/Github/isofit/isofit/core/fileio.py\", line 684, in build_output\u001b[32m [repeated 25x across cluster]\u001b[0m\n",
      "\u001b[36m(Worker pid=17538)\u001b[0m     rfl_alg_opt, Ls, coeffs = invert_algebraic(\u001b[32m [repeated 25x across cluster]\u001b[0m\n",
      "\u001b[36m(Worker pid=17538)\u001b[0m ValueError: not enough values to unpack (expected 3, got 2)\u001b[32m [repeated 25x across cluster]\u001b[0m\n",
      "\u001b[36m(Worker pid=17536)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17535)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17537)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17538)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17536)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17535)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17538)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17536)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17537)\u001b[0m INFO:2025-07-08,15:22:32 ||| Worker 2 completed 56/~105.0:: 53.33% complete\u001b[32m [repeated 2x across cluster]\u001b[0m\n",
      "\u001b[36m(Worker pid=17537)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17535)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17538)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17537)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17536)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17535)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17538)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17536)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17537)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17535)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17538)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17536)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17538)\u001b[0m INFO:2025-07-08,15:22:37 ||| Worker at start location (235,0) completed 9/10\n",
      "\u001b[36m(Worker pid=17537)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17535)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17535)\u001b[0m INFO:2025-07-08,15:22:38 ||| Worker at start location (225,0) completed 10/11\n",
      "\u001b[36m(Worker pid=17538)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17536)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17537)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17535)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17535)\u001b[0m ERROR:2025-07-08,15:22:39 ||| \u001b[32m [repeated 26x across cluster]\u001b[0m\n",
      "\u001b[36m(Worker pid=17535)\u001b[0m                     Encountered the following ValueError in (row,col) (269,0).\u001b[32m [repeated 26x across cluster]\u001b[0m\n",
      "\u001b[36m(Worker pid=17535)\u001b[0m                     Results for this pixel will be all zeros.\u001b[32m [repeated 26x across cluster]\u001b[0m\n",
      "\u001b[36m(Worker pid=17535)\u001b[0m Traceback (most recent call last):\u001b[32m [repeated 26x across cluster]\u001b[0m\n",
      "\u001b[36m(Worker pid=17535)\u001b[0m   File \"/Users/bgreenbe/Github/isofit/isofit/core/isofit.py\", line 263, in run_set_of_spectra\u001b[32m [repeated 26x across cluster]\u001b[0m\n",
      "\u001b[36m(Worker pid=17535)\u001b[0m     self.io.write_spectrum(row, col, states, self.fm, self.iv)\u001b[32m [repeated 26x across cluster]\u001b[0m\n",
      "\u001b[36m(Worker pid=17535)\u001b[0m   File \"/Users/bgreenbe/Github/isofit/isofit/core/fileio.py\", line 747, in write_spectrum\u001b[32m [repeated 26x across cluster]\u001b[0m\n",
      "\u001b[36m(Worker pid=17535)\u001b[0m     to_write = self.build_output(states, self.current_input_data, fm, iv)\u001b[32m [repeated 26x across cluster]\u001b[0m\n",
      "\u001b[36m(Worker pid=17535)\u001b[0m   File \"/Users/bgreenbe/Github/isofit/isofit/core/fileio.py\", line 684, in build_output\u001b[32m [repeated 26x across cluster]\u001b[0m\n",
      "\u001b[36m(Worker pid=17535)\u001b[0m     rfl_alg_opt, Ls, coeffs = invert_algebraic(\u001b[32m [repeated 26x across cluster]\u001b[0m\n",
      "\u001b[36m(Worker pid=17535)\u001b[0m ValueError: not enough values to unpack (expected 3, got 2)\u001b[32m [repeated 26x across cluster]\u001b[0m\n",
      "\u001b[36m(Worker pid=17538)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17536)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17537)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17535)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17538)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17537)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17536)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17535)\u001b[0m INFO:2025-07-08,15:22:39 ||| Worker 3 completed 64/~105.0:: 60.95% complete\u001b[32m [repeated 2x across cluster]\u001b[0m\n",
      "\u001b[36m(Worker pid=17535)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17538)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17537)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17536)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17535)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17537)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17538)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17536)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17535)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17537)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17538)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17535)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17536)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17537)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17537)\u001b[0m INFO:2025-07-08,15:22:41 ||| Worker at start location (257,0) completed 10/11\u001b[32m [repeated 2x across cluster]\u001b[0m\n",
      "\u001b[36m(Worker pid=17538)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17536)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17535)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17535)\u001b[0m ERROR:2025-07-08,15:22:44 ||| \u001b[32m [repeated 24x across cluster]\u001b[0m\n",
      "\u001b[36m(Worker pid=17535)\u001b[0m                     Encountered the following ValueError in (row,col) (275,0).\u001b[32m [repeated 24x across cluster]\u001b[0m\n",
      "\u001b[36m(Worker pid=17535)\u001b[0m                     Results for this pixel will be all zeros.\u001b[32m [repeated 24x across cluster]\u001b[0m\n",
      "\u001b[36m(Worker pid=17535)\u001b[0m Traceback (most recent call last):\u001b[32m [repeated 24x across cluster]\u001b[0m\n",
      "\u001b[36m(Worker pid=17535)\u001b[0m   File \"/Users/bgreenbe/Github/isofit/isofit/core/isofit.py\", line 263, in run_set_of_spectra\u001b[32m [repeated 24x across cluster]\u001b[0m\n",
      "\u001b[36m(Worker pid=17535)\u001b[0m     self.io.write_spectrum(row, col, states, self.fm, self.iv)\u001b[32m [repeated 24x across cluster]\u001b[0m\n",
      "\u001b[36m(Worker pid=17535)\u001b[0m   File \"/Users/bgreenbe/Github/isofit/isofit/core/fileio.py\", line 747, in write_spectrum\u001b[32m [repeated 24x across cluster]\u001b[0m\n",
      "\u001b[36m(Worker pid=17535)\u001b[0m     to_write = self.build_output(states, self.current_input_data, fm, iv)\u001b[32m [repeated 24x across cluster]\u001b[0m\n",
      "\u001b[36m(Worker pid=17535)\u001b[0m   File \"/Users/bgreenbe/Github/isofit/isofit/core/fileio.py\", line 684, in build_output\u001b[32m [repeated 24x across cluster]\u001b[0m\n",
      "\u001b[36m(Worker pid=17535)\u001b[0m     rfl_alg_opt, Ls, coeffs = invert_algebraic(\u001b[32m [repeated 24x across cluster]\u001b[0m\n",
      "\u001b[36m(Worker pid=17535)\u001b[0m ValueError: not enough values to unpack (expected 3, got 2)\u001b[32m [repeated 24x across cluster]\u001b[0m\n",
      "\u001b[36m(Worker pid=17537)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17538)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17536)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17535)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17537)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17538)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17536)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17537)\u001b[0m INFO:2025-07-08,15:22:41 ||| Worker 2 completed 67/~105.0:: 63.81% complete\u001b[32m [repeated 2x across cluster]\u001b[0m\n",
      "\u001b[36m(Worker pid=17535)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17537)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17538)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17536)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17535)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17537)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17538)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17535)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17537)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17536)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17538)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17537)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17536)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17535)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17538)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17535)\u001b[0m INFO:2025-07-08,15:22:47 ||| Worker at start location (279,0) completed 10/11\u001b[32m [repeated 2x across cluster]\u001b[0m\n",
      "\u001b[36m(Worker pid=17537)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17536)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17535)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17538)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17538)\u001b[0m ERROR:2025-07-08,15:22:49 ||| \u001b[32m [repeated 26x across cluster]\u001b[0m\n",
      "\u001b[36m(Worker pid=17538)\u001b[0m                     Encountered the following ValueError in (row,col) (303,0).\u001b[32m [repeated 26x across cluster]\u001b[0m\n",
      "\u001b[36m(Worker pid=17538)\u001b[0m                     Results for this pixel will be all zeros.\u001b[32m [repeated 26x across cluster]\u001b[0m\n",
      "\u001b[36m(Worker pid=17538)\u001b[0m Traceback (most recent call last):\u001b[32m [repeated 26x across cluster]\u001b[0m\n",
      "\u001b[36m(Worker pid=17538)\u001b[0m   File \"/Users/bgreenbe/Github/isofit/isofit/core/isofit.py\", line 263, in run_set_of_spectra\u001b[32m [repeated 26x across cluster]\u001b[0m\n",
      "\u001b[36m(Worker pid=17538)\u001b[0m     self.io.write_spectrum(row, col, states, self.fm, self.iv)\u001b[32m [repeated 26x across cluster]\u001b[0m\n",
      "\u001b[36m(Worker pid=17538)\u001b[0m   File \"/Users/bgreenbe/Github/isofit/isofit/core/fileio.py\", line 747, in write_spectrum\u001b[32m [repeated 26x across cluster]\u001b[0m\n",
      "\u001b[36m(Worker pid=17538)\u001b[0m     to_write = self.build_output(states, self.current_input_data, fm, iv)\u001b[32m [repeated 26x across cluster]\u001b[0m\n",
      "\u001b[36m(Worker pid=17538)\u001b[0m   File \"/Users/bgreenbe/Github/isofit/isofit/core/fileio.py\", line 684, in build_output\u001b[32m [repeated 26x across cluster]\u001b[0m\n",
      "\u001b[36m(Worker pid=17538)\u001b[0m     rfl_alg_opt, Ls, coeffs = invert_algebraic(\u001b[32m [repeated 26x across cluster]\u001b[0m\n",
      "\u001b[36m(Worker pid=17538)\u001b[0m ValueError: not enough values to unpack (expected 3, got 2)\u001b[32m [repeated 26x across cluster]\u001b[0m\n",
      "\u001b[36m(Worker pid=17536)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17535)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17537)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17538)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17536)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17535)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17536)\u001b[0m INFO:2025-07-08,15:22:49 ||| Worker 0 completed 77/~105.0:: 73.33% complete\u001b[32m [repeated 3x across cluster]\u001b[0m\n",
      "\u001b[36m(Worker pid=17537)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17538)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17536)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17537)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17535)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17538)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17537)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17536)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17535)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17538)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17537)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17536)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17535)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17538)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17537)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17537)\u001b[0m INFO:2025-07-08,15:22:50 ||| Worker at start location (300,0) completed 10/11\u001b[32m [repeated 2x across cluster]\u001b[0m\n",
      "\u001b[36m(Worker pid=17535)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17536)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17538)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17535)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17535)\u001b[0m ERROR:2025-07-08,15:22:55 ||| \u001b[32m [repeated 25x across cluster]\u001b[0m\n",
      "\u001b[36m(Worker pid=17535)\u001b[0m                     Encountered the following ValueError in (row,col) (320,0).\u001b[32m [repeated 25x across cluster]\u001b[0m\n",
      "\u001b[36m(Worker pid=17535)\u001b[0m                     Results for this pixel will be all zeros.\u001b[32m [repeated 25x across cluster]\u001b[0m\n",
      "\u001b[36m(Worker pid=17535)\u001b[0m Traceback (most recent call last):\u001b[32m [repeated 25x across cluster]\u001b[0m\n",
      "\u001b[36m(Worker pid=17535)\u001b[0m   File \"/Users/bgreenbe/Github/isofit/isofit/core/isofit.py\", line 263, in run_set_of_spectra\u001b[32m [repeated 25x across cluster]\u001b[0m\n",
      "\u001b[36m(Worker pid=17535)\u001b[0m     self.io.write_spectrum(row, col, states, self.fm, self.iv)\u001b[32m [repeated 25x across cluster]\u001b[0m\n",
      "\u001b[36m(Worker pid=17535)\u001b[0m   File \"/Users/bgreenbe/Github/isofit/isofit/core/fileio.py\", line 747, in write_spectrum\u001b[32m [repeated 25x across cluster]\u001b[0m\n",
      "\u001b[36m(Worker pid=17535)\u001b[0m     to_write = self.build_output(states, self.current_input_data, fm, iv)\u001b[32m [repeated 25x across cluster]\u001b[0m\n",
      "\u001b[36m(Worker pid=17535)\u001b[0m   File \"/Users/bgreenbe/Github/isofit/isofit/core/fileio.py\", line 684, in build_output\u001b[32m [repeated 25x across cluster]\u001b[0m\n",
      "\u001b[36m(Worker pid=17535)\u001b[0m     rfl_alg_opt, Ls, coeffs = invert_algebraic(\u001b[32m [repeated 25x across cluster]\u001b[0m\n",
      "\u001b[36m(Worker pid=17535)\u001b[0m ValueError: not enough values to unpack (expected 3, got 2)\u001b[32m [repeated 25x across cluster]\u001b[0m\n",
      "\u001b[36m(Worker pid=17537)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17536)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17538)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17535)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17536)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17537)\u001b[0m INFO:2025-07-08,15:22:50 ||| Worker 2 completed 78/~105.0:: 74.29% complete\n",
      "\u001b[36m(Worker pid=17537)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17538)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17535)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17537)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17536)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17538)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17538)\u001b[0m INFO:2025-07-08,15:22:57 ||| Worker 1 completed 86/~105.0:: 81.9% complete\n",
      "\u001b[36m(Worker pid=17535)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17537)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17536)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17538)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17535)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17537)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17536)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17535)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17536)\u001b[0m INFO:2025-07-08,15:22:58 ||| Worker at start location (332,0) completed 9/10\u001b[32m [repeated 3x across cluster]\u001b[0m\n",
      "\u001b[36m(Worker pid=17538)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17537)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17536)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17538)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17535)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17537)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17537)\u001b[0m ERROR:2025-07-08,15:23:00 ||| \u001b[32m [repeated 25x across cluster]\u001b[0m\n",
      "\u001b[36m(Worker pid=17537)\u001b[0m                     Encountered the following ValueError in (row,col) (376,0).\u001b[32m [repeated 25x across cluster]\u001b[0m\n",
      "\u001b[36m(Worker pid=17537)\u001b[0m                     Results for this pixel will be all zeros.\u001b[32m [repeated 25x across cluster]\u001b[0m\n",
      "\u001b[36m(Worker pid=17537)\u001b[0m Traceback (most recent call last):\u001b[32m [repeated 25x across cluster]\u001b[0m\n",
      "\u001b[36m(Worker pid=17537)\u001b[0m   File \"/Users/bgreenbe/Github/isofit/isofit/core/isofit.py\", line 263, in run_set_of_spectra\u001b[32m [repeated 25x across cluster]\u001b[0m\n",
      "\u001b[36m(Worker pid=17537)\u001b[0m     self.io.write_spectrum(row, col, states, self.fm, self.iv)\u001b[32m [repeated 25x across cluster]\u001b[0m\n",
      "\u001b[36m(Worker pid=17537)\u001b[0m   File \"/Users/bgreenbe/Github/isofit/isofit/core/fileio.py\", line 747, in write_spectrum\u001b[32m [repeated 25x across cluster]\u001b[0m\n",
      "\u001b[36m(Worker pid=17537)\u001b[0m     to_write = self.build_output(states, self.current_input_data, fm, iv)\u001b[32m [repeated 25x across cluster]\u001b[0m\n",
      "\u001b[36m(Worker pid=17537)\u001b[0m   File \"/Users/bgreenbe/Github/isofit/isofit/core/fileio.py\", line 684, in build_output\u001b[32m [repeated 25x across cluster]\u001b[0m\n",
      "\u001b[36m(Worker pid=17537)\u001b[0m     rfl_alg_opt, Ls, coeffs = invert_algebraic(\u001b[32m [repeated 25x across cluster]\u001b[0m\n",
      "\u001b[36m(Worker pid=17537)\u001b[0m ValueError: not enough values to unpack (expected 3, got 2)\u001b[32m [repeated 25x across cluster]\u001b[0m\n",
      "\u001b[36m(Worker pid=17536)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17535)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17538)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17537)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17536)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17538)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17537)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17535)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17536)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17538)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17537)\u001b[0m INFO:2025-07-08,15:23:00 ||| Worker 2 completed 89/~105.0:: 84.76% complete\u001b[32m [repeated 3x across cluster]\u001b[0m\n",
      "\u001b[36m(Worker pid=17535)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17537)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17536)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17538)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17537)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17535)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17536)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17538)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17535)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17537)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17536)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17537)\u001b[0m INFO:2025-07-08,15:22:59 ||| Worker at start location (343,0) completed 10/11\n",
      "\u001b[36m(Worker pid=17538)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17535)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17537)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17537)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17537)\u001b[0m ERROR:2025-07-08,15:23:05 ||| \u001b[32m [repeated 25x across cluster]\u001b[0m\n",
      "\u001b[36m(Worker pid=17537)\u001b[0m                     Encountered the following ValueError in (row,col) (383,0).\u001b[32m [repeated 25x across cluster]\u001b[0m\n",
      "\u001b[36m(Worker pid=17537)\u001b[0m                     Results for this pixel will be all zeros.\u001b[32m [repeated 25x across cluster]\u001b[0m\n",
      "\u001b[36m(Worker pid=17537)\u001b[0m Traceback (most recent call last):\u001b[32m [repeated 25x across cluster]\u001b[0m\n",
      "\u001b[36m(Worker pid=17537)\u001b[0m   File \"/Users/bgreenbe/Github/isofit/isofit/core/isofit.py\", line 263, in run_set_of_spectra\u001b[32m [repeated 25x across cluster]\u001b[0m\n",
      "\u001b[36m(Worker pid=17537)\u001b[0m     self.io.write_spectrum(row, col, states, self.fm, self.iv)\u001b[32m [repeated 25x across cluster]\u001b[0m\n",
      "\u001b[36m(Worker pid=17537)\u001b[0m   File \"/Users/bgreenbe/Github/isofit/isofit/core/fileio.py\", line 747, in write_spectrum\u001b[32m [repeated 25x across cluster]\u001b[0m\n",
      "\u001b[36m(Worker pid=17537)\u001b[0m     to_write = self.build_output(states, self.current_input_data, fm, iv)\u001b[32m [repeated 25x across cluster]\u001b[0m\n",
      "\u001b[36m(Worker pid=17537)\u001b[0m   File \"/Users/bgreenbe/Github/isofit/isofit/core/fileio.py\", line 684, in build_output\u001b[32m [repeated 25x across cluster]\u001b[0m\n",
      "\u001b[36m(Worker pid=17537)\u001b[0m     rfl_alg_opt, Ls, coeffs = invert_algebraic(\u001b[32m [repeated 25x across cluster]\u001b[0m\n",
      "\u001b[36m(Worker pid=17537)\u001b[0m ValueError: not enough values to unpack (expected 3, got 2)\u001b[32m [repeated 25x across cluster]\u001b[0m\n",
      "\u001b[36m(Worker pid=17538)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17538)\u001b[0m INFO:2025-07-08,15:23:05 ||| Worker at start location (354,0) completed 10/11\n",
      "\u001b[36m(Worker pid=17536)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17535)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17537)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17538)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17535)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17536)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17537)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17535)\u001b[0m INFO:2025-07-08,15:23:06 ||| Worker 3 completed 97/~105.0:: 92.38% complete\u001b[32m [repeated 2x across cluster]\u001b[0m\n",
      "\u001b[36m(Worker pid=17535)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17538)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17536)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17537)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17535)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17538)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17536)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17535)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17536)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17538)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17535)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17538)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17536)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17536)\u001b[0m ERROR:2025-07-08,15:23:10 ||| \u001b[32m [repeated 21x across cluster]\u001b[0m\n",
      "\u001b[36m(Worker pid=17536)\u001b[0m                     Encountered the following ValueError in (row,col) (412,0).\u001b[32m [repeated 21x across cluster]\u001b[0m\n",
      "\u001b[36m(Worker pid=17536)\u001b[0m                     Results for this pixel will be all zeros.\u001b[32m [repeated 21x across cluster]\u001b[0m\n",
      "\u001b[36m(Worker pid=17536)\u001b[0m Traceback (most recent call last):\u001b[32m [repeated 21x across cluster]\u001b[0m\n",
      "\u001b[36m(Worker pid=17536)\u001b[0m   File \"/Users/bgreenbe/Github/isofit/isofit/core/isofit.py\", line 263, in run_set_of_spectra\u001b[32m [repeated 21x across cluster]\u001b[0m\n",
      "\u001b[36m(Worker pid=17536)\u001b[0m     self.io.write_spectrum(row, col, states, self.fm, self.iv)\u001b[32m [repeated 21x across cluster]\u001b[0m\n",
      "\u001b[36m(Worker pid=17536)\u001b[0m   File \"/Users/bgreenbe/Github/isofit/isofit/core/fileio.py\", line 747, in write_spectrum\u001b[32m [repeated 21x across cluster]\u001b[0m\n",
      "\u001b[36m(Worker pid=17536)\u001b[0m     to_write = self.build_output(states, self.current_input_data, fm, iv)\u001b[32m [repeated 21x across cluster]\u001b[0m\n",
      "\u001b[36m(Worker pid=17536)\u001b[0m   File \"/Users/bgreenbe/Github/isofit/isofit/core/fileio.py\", line 684, in build_output\u001b[32m [repeated 21x across cluster]\u001b[0m\n",
      "\u001b[36m(Worker pid=17536)\u001b[0m     rfl_alg_opt, Ls, coeffs = invert_algebraic(\u001b[32m [repeated 21x across cluster]\u001b[0m\n",
      "\u001b[36m(Worker pid=17536)\u001b[0m ValueError: not enough values to unpack (expected 3, got 2)\u001b[32m [repeated 21x across cluster]\u001b[0m\n",
      "\u001b[36m(Worker pid=17537)\u001b[0m INFO:2025-07-08,15:23:08 ||| Worker at start location (386,0) completed 10/11\u001b[32m [repeated 3x across cluster]\u001b[0m\n",
      "\u001b[36m(Worker pid=17535)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17538)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17536)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17535)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17538)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17536)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17535)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17536)\u001b[0m INFO:2025-07-08,15:23:07 ||| Worker 0 completed 97/~105.0:: 92.38% complete\n",
      "\u001b[36m(Worker pid=17538)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17536)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17535)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17536)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17538)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17535)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17536)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17538)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17535)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17538)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17536)\u001b[0m                     \n",
      "INFO:2025-07-08,15:23:16 || isofit.py:run() | Inversions complete.  91.06s total, 4.6123 spectra/s, 1.1531 spectra/s/core\n",
      "INFO:2025-07-08,15:23:16 || apply_oe.py:apply_oe() | Analytical line inference\n",
      "INFO:2025-07-08,15:23:16 || configs.py:create_new_config() | Loading config file: /Users/bgreenbe/.isofit/neon_subset/output/NIS01_20210403_173647/config/NIS01_20210403_173647_isofit.json\n",
      "INFO:2025-07-08,15:23:16 || radiative_transfer_engine.py:__init__() | Loading from wavelength_file: /Users/bgreenbe/.isofit/neon_subset/output/NIS01_20210403_173647/data/wavelengths.txt\n",
      "INFO:2025-07-08,15:23:16 || radiative_transfer_engine.py:__init__() | Prebuilt LUT provided\n",
      "INFO:2025-07-08,15:23:16 || luts.py:load() | Loading LUT into memory\n",
      "\u001b[36m(Worker pid=17536)\u001b[0m                     \n",
      "\u001b[36m(Worker pid=17536)\u001b[0m ERROR:2025-07-08,15:23:16 ||| \u001b[32m [repeated 19x across cluster]\u001b[0m\n",
      "\u001b[36m(Worker pid=17536)\u001b[0m                     Encountered the following ValueError in (row,col) (419,0).\u001b[32m [repeated 19x across cluster]\u001b[0m\n",
      "\u001b[36m(Worker pid=17536)\u001b[0m                     Results for this pixel will be all zeros.\u001b[32m [repeated 19x across cluster]\u001b[0m\n",
      "\u001b[36m(Worker pid=17536)\u001b[0m Traceback (most recent call last):\u001b[32m [repeated 19x across cluster]\u001b[0m\n",
      "\u001b[36m(Worker pid=17536)\u001b[0m   File \"/Users/bgreenbe/Github/isofit/isofit/core/isofit.py\", line 263, in run_set_of_spectra\u001b[32m [repeated 19x across cluster]\u001b[0m\n",
      "\u001b[36m(Worker pid=17536)\u001b[0m     self.io.write_spectrum(row, col, states, self.fm, self.iv)\u001b[32m [repeated 19x across cluster]\u001b[0m\n",
      "\u001b[36m(Worker pid=17536)\u001b[0m   File \"/Users/bgreenbe/Github/isofit/isofit/core/fileio.py\", line 747, in write_spectrum\u001b[32m [repeated 19x across cluster]\u001b[0m\n",
      "\u001b[36m(Worker pid=17536)\u001b[0m     to_write = self.build_output(states, self.current_input_data, fm, iv)\u001b[32m [repeated 19x across cluster]\u001b[0m\n",
      "\u001b[36m(Worker pid=17536)\u001b[0m   File \"/Users/bgreenbe/Github/isofit/isofit/core/fileio.py\", line 684, in build_output\u001b[32m [repeated 19x across cluster]\u001b[0m\n",
      "\u001b[36m(Worker pid=17536)\u001b[0m     rfl_alg_opt, Ls, coeffs = invert_algebraic(\u001b[32m [repeated 19x across cluster]\u001b[0m\n",
      "\u001b[36m(Worker pid=17536)\u001b[0m ValueError: not enough values to unpack (expected 3, got 2)\u001b[32m [repeated 19x across cluster]\u001b[0m\n",
      "\u001b[36m(Worker pid=17536)\u001b[0m INFO:2025-07-08,15:23:16 ||| Worker at start location (419,0) completed 10/11\u001b[32m [repeated 3x across cluster]\u001b[0m\n",
      "WARNING:2025-07-08,15:23:16 || luts.py:load() | thermal_upwelling is fully NaN, leaving as-is\n",
      "WARNING:2025-07-08,15:23:16 || luts.py:load() | thermal_downwelling is fully NaN, leaving as-is\n",
      "INFO:2025-07-08,15:23:16 || radiative_transfer_engine.py:__init__() | LUT grid loaded from file\n",
      "2025-07-08 15:23:17,031\tINFO worker.py:1747 -- Calling ray.init() again after it has already been called.\n",
      "INFO:2025-07-08,15:23:17 || atm_interpolation.py:atm_interpolation() | Beginning atmospheric interpolation 4 cores\n",
      "INFO:2025-07-08,15:23:18 || atm_interpolation.py:atm_interpolation() | Parallel atmospheric interpolations complete.  1.3430540561676025 s total, 3142.8370143526467 spectra/s, 785.7092535881617 spectra/s/core\n",
      "2025-07-08 15:23:18,445\tINFO worker.py:1747 -- Calling ray.init() again after it has already been called.\n",
      "\u001b[36m(Worker pid=17655)\u001b[0m INFO:2025-07-08,15:23:22 ||| Analytical line writing line 4\n",
      "\u001b[36m(Worker pid=17655)\u001b[0m INFO:2025-07-08,15:23:28 ||| Analytical line writing line 9\u001b[32m [repeated 8x across cluster]\u001b[0m\n",
      "\u001b[36m(Worker pid=17655)\u001b[0m INFO:2025-07-08,15:23:34 ||| Analytical line writing line 17\u001b[32m [repeated 8x across cluster]\u001b[0m\n",
      "\u001b[36m(Worker pid=17655)\u001b[0m INFO:2025-07-08,15:23:40 ||| Analytical line writing line 25\u001b[32m [repeated 8x across cluster]\u001b[0m\n",
      "\u001b[36m(Worker pid=17655)\u001b[0m INFO:2025-07-08,15:23:46 ||| Analytical line writing line 33\u001b[32m [repeated 8x across cluster]\u001b[0m\n",
      "\u001b[36m(Worker pid=17655)\u001b[0m INFO:2025-07-08,15:23:52 ||| Analytical line writing line 42\u001b[32m [repeated 8x across cluster]\u001b[0m\n",
      "\u001b[36m(Worker pid=17655)\u001b[0m INFO:2025-07-08,15:23:58 ||| Analytical line writing line 50\u001b[32m [repeated 8x across cluster]\u001b[0m\n",
      "\u001b[36m(Worker pid=17655)\u001b[0m INFO:2025-07-08,15:24:04 ||| Analytical line writing line 58\u001b[32m [repeated 8x across cluster]\u001b[0m\n",
      "INFO:2025-07-08,15:24:10 || analytical_line.py:analytical_line() | Analytical line inversions complete.  51.63s total, 81.7487 spectra/s, 20.4372 spectra/s/core\n",
      "INFO:2025-07-08,15:24:10 || apply_oe.py:apply_oe() | Done.\n",
      "\u001b[36m(Worker pid=17657)\u001b[0m INFO:2025-07-08,15:24:07 ||| Analytical line writing line 60\u001b[32m [repeated 5x across cluster]\u001b[0m\n",
      "I0000 00:00:1752013450.613965 2663318 chttp2_transport.cc:1182] ipv4:127.0.0.1:65123: Got goaway [2] err=UNAVAILABLE:GOAWAY received; Error code: 2; Debug Text: Cancelling all calls {grpc_status:14, http2_error:2, created_time:\"2025-07-08T15:24:10.613957-07:00\", file_line:1171, file:\"external/com_github_grpc_grpc/src/core/ext/transport/chttp2/transport/chttp2_transport.cc\"}\n"
     ]
    }
   ],
   "source": [
    "kwargs = {\n",
    "        'input_radiance': os.path.join(subset_dir,f'NIS01_20210403_{neon_id}_rdn_ort'), # Radiance\n",
    "        'input_loc': os.path.join(subset_dir,f'NIS01_20210403_{neon_id}_loc_ort'), # Location\n",
    "        'input_obs': os.path.join(subset_dir,f'NIS01_20210403_{neon_id}_obs_ort'), # Observations\n",
    "        'working_directory': os.path.join(output, f'NIS01_20210403_{neon_id}'), # Output directory\n",
    "        'sensor': 'neon', \n",
    "        \"surface_path\": output_surface_file, # Surface priors - often changes\n",
    "        'emulator_base': os.environ['EMULATOR_PATH'],\n",
    "        'n_cores': 4,\n",
    "        \"wavelength_path\": None,\n",
    "        \"surface_category\": \"multicomponent_surface\",\n",
    "        \"rdn_factors_path\": None, # RCC update used 'on the fly'\n",
    "        \"channelized_uncertainty_path\": None, # Channelized uncertainty - if you have an instrument model\n",
    "        \"model_discrepancy_path\": None, # Model discrepancy term - handle things like unknown radiative transfer model effects\n",
    "        \"lut_config_file\": None,\n",
    "        \"logging_level\": \"INFO\",\n",
    "        \"log_file\": None,\n",
    "        \"presolve\": True, # Attempts to solve for the right wv range\n",
    "        \"analytical_line\": True, # mathematical representation of OE given that the atmsophere is known\n",
    "        \"ray_temp_dir\": \"/tmp/ray\",\n",
    "        \"segmentation_size\": 10,\n",
    "        \"num_neighbors\": [5],\n",
    "        \"atm_sigma\": [0.5],\n",
    "        \"pressure_elevation\": False,\n",
    "}\n",
    "\n",
    "apply_oe(**kwargs)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "9d31291a-c036-4288-9114-cd772dda6748",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "from spectral.io import envi\n",
    "import matplotlib.pyplot as plt\n",
    "for _key, key in enumerate(report.keys()):\n",
    "  if _key < 1:\n",
    "\n",
    "    rfl_ds = envi.open(os.path.join(output, f'NIS01_20210403_{key}','output',f'NIS01_20210403_{key}_rfl.hdr'))\n",
    "    rfl_rgb = rfl_ds.open_memmap(interleave='bip')[:,:,np.array([60,40,30])].copy()\n",
    "    wl = np.array([float(x) for x in rfl_ds.metadata['wavelength']])\n",
    "\n",
    "    miny = np.min([np.min([i[0],i[1]]) for k,i in report[key].items()])-5\n",
    "    maxy = np.max([np.max([i[0],i[1]]) for k,i in report[key].items()])+5\n",
    "    minx = np.min([np.min([i[2],i[3]]) for k,i in report[key].items()])-5\n",
    "    maxx = np.max([np.max([i[2],i[3]]) for k,i in report[key].items()])+5\n",
    "\n",
    "    plt.figure()\n",
    "    plt.imshow(rfl_rgb / np.max(rfl_rgb,axis=(0,1)))\n",
    "    plt.title(f'NIS01_20210403_{key}')\n",
    "    for k,i in report[key].items():\n",
    "        plt.plot([i[2]-minx,i[3]-minx,i[3]-minx,i[2]-minx,i[2]-minx],[i[0]-miny,i[0]-miny,i[1]-miny,i[1]-miny,i[0]-miny],label=k)\n",
    "\n",
    "    for k,i in report[key].items():\n",
    "        plt.figure()\n",
    "        in_situ_path = str(Path(f'~/.isofit/neon_subset/FieldSpectrometer/{k}01/Data/{k}01_Refl.dat').expanduser())\n",
    "        in_situ = np.genfromtxt(in_situ_path, skip_header=3)\n",
    "        plt.plot(in_situ[:,0], in_situ[:,1], label=f'In Situ {k}',c='red',ls='-')\n",
    "        mean_rfl = np.mean(rfl_ds.open_memmap(interleave='bip')[i[0]-miny:i[1]-miny,i[2]-minx:i[3]-minx,:],axis=(0,1))\n",
    "        plt.plot(wl, mean_rfl, label=f'Ret. {k}', c='black')\n",
    "        plt.legend()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "85419744-2391-48f0-b6c2-239390d4b994",
   "metadata": {},
   "source": [
    "## Per-Pixel Retrievals\n",
    "\n",
    "This next section is an excercise in running ISOFIT in pixel mode (dynamically from python).\n",
    "\n",
    "To get started with executing ISOFIT for iterable improvements, ISOFIT is comprised of three primary pieces:\n",
    "\n",
    "1. The `ForwardModel` object\n",
    "2. The `IO` object\n",
    "2. The `Inverse` object\n",
    "\n",
    "There is also an `Isofit` object that holds each of the other three, and is commonly used for more generic runs (it is what is called by apply_oe)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "f60f1ae9-754b-4c25-bc51-70b792debed7",
   "metadata": {},
   "outputs": [],
   "source": [
    "from isofit.core.isofit import Isofit\n",
    "from isofit.core.fileio import IO\n",
    "from isofit.core.forward import ForwardModel\n",
    "from isofit.inversion.inverse import Inversion\n",
    "from isofit.inversion.inverse_simple import invert_algebraic\n",
    "from isofit.configs import configs\n",
    "from isofit.core.geometry import Geometry\n",
    "\n",
    "import os\n",
    "import logging\n",
    "import numpy as np\n",
    "from spectral.io import envi\n",
    "import matplotlib.pyplot as plt\n",
    "%matplotlib inline\n",
    "\n",
    "# Enable the ISOFIT logger\n",
    "logging.getLogger().setLevel(logging.INFO)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "5efac6d4-c9f5-4292-a8e1-739939056ac1",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "INFO:2025-07-08,15:50:17 || configs.py:create_new_config() | Loading config file: /Users/bgreenbe/.isofit/neon_subset/output/NIS01_20210403_173647/config/NIS01_20210403_173647_isofit.json\n",
      "INFO:2025-07-08,15:50:17 || radiative_transfer_engine.py:__init__() | Loading from wavelength_file: /Users/bgreenbe/.isofit/neon_subset/output/NIS01_20210403_173647/data/wavelengths.txt\n",
      "INFO:2025-07-08,15:50:17 || radiative_transfer_engine.py:__init__() | Prebuilt LUT provided\n",
      "INFO:2025-07-08,15:50:17 || luts.py:load() | Loading LUT into memory\n",
      "WARNING:2025-07-08,15:50:17 || luts.py:load() | thermal_upwelling is fully NaN, leaving as-is\n",
      "WARNING:2025-07-08,15:50:17 || luts.py:load() | thermal_downwelling is fully NaN, leaving as-is\n",
      "INFO:2025-07-08,15:50:17 || radiative_transfer_engine.py:__init__() | LUT grid loaded from file\n"
     ]
    }
   ],
   "source": [
    "# Now run actual retrievals\n",
    "config = configs.create_new_config(os.path.join(output, f'NIS01_20210403_{neon_id}','config',f'NIS01_20210403_{neon_id}_isofit.json')) \n",
    "config.forward_model.surface.surface_file = str(Path('~/.isofit/examples/20171108_Pasadena/configs/surface.mat').expanduser())\n",
    "\n",
    "#model = Isofit(os.path.join(output,f'NIS01_20210403_{neon_id}','config',f'NIS01_20210403_{neon_id}_isofit.json'))\n",
    "config.input.measured_radiance_file =  os.path.join(subset_dir, f'NIS01_20210403_{neon_id}_rdn_ort')\n",
    "config.input.obs_file =  os.path.join(subset_dir, f'NIS01_20210403_{neon_id}_obs_ort')\n",
    "config.input.loc_file =  os.path.join(subset_dir, f'NIS01_20210403_{neon_id}_loc_ort')\n",
    "\n",
    "fm = ForwardModel(config)\n",
    "io = IO(config, fm)\n",
    "inv = Inversion(config, fm)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "467786f7-35a6-4472-92c5-1fa753da9e3d",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "WARNING:2025-07-08,15:50:30 || geometry.py:__init__() | Earth sun distance not provided. Proceeding without might cause some inaccuracies down the line\n"
     ]
    }
   ],
   "source": [
    "region = 'Veg'\n",
    "offsets = {}\n",
    "miny = np.min([np.min([i[0],i[1]]) for k,i in report[neon_id].items()])-5\n",
    "maxy = np.max([np.max([i[0],i[1]]) for k,i in report[neon_id].items()])+5\n",
    "minx = np.min([np.min([i[2],i[3]]) for k,i in report[neon_id].items()])-5\n",
    "maxx = np.max([np.max([i[2],i[3]]) for k,i in report[neon_id].items()])+5\n",
    "offsets[neon_id] = [minx,miny]\n",
    "adj_roi = [roi[region][0] - offsets[neon_id][1], roi[region][1] - offsets[neon_id][1], roi[region][2] - offsets[neon_id][0], roi[region][3] - offsets[neon_id][0]]\n",
    "\n",
    "rdn = np.mean(envi.open(config.input.measured_radiance_file + '.hdr').open_memmap(interleave='bip')[adj_roi[0]:adj_roi[1],adj_roi[2]:adj_roi[3],:].copy(),axis=(0,1))\n",
    "obs = np.mean(envi.open(config.input.obs_file + '.hdr').open_memmap(interleave='bip')[adj_roi[0]:adj_roi[1],adj_roi[2]:adj_roi[3],:].copy(),axis=(0,1))\n",
    "loc = np.mean(envi.open(config.input.loc_file + '.hdr').open_memmap(interleave='bip')[adj_roi[0]:adj_roi[1],adj_roi[2]:adj_roi[3],:].copy(),axis=(0,1))\n",
    "\n",
    "geom = Geometry(obs=obs,loc=loc)\n",
    "states = inv.invert(rdn, geom)\n",
    "\n",
    "x_surface, x_RT, x_instrument = fm.unpack(states[-1,:])\n",
    "\n",
    "x_alg, coeffs = invert_algebraic(fm.surface, fm.RT, fm.instrument, \n",
    "                           x_surface, x_RT, x_instrument,\n",
    "                           rdn, geom,\n",
    "                           )\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "fdbd8001-530b-497f-a2c8-fdda0a2206d2",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(13, 428)\n",
      "[0.10742364 0.60519719]\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1400x500 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "def closest_wl(mv):\n",
    "    return np.argmin(np.abs(io.meas_wl-mv))\n",
    "\n",
    "wl_nan = io.meas_wl.copy()\n",
    "wl_nan[closest_wl(1360):closest_wl(1410)] = np.nan\n",
    "wl_nan[closest_wl(1800):closest_wl(1970)] = np.nan\n",
    "\n",
    "fig = plt.figure(figsize=(14,5))\n",
    "print(states.shape)\n",
    "offset = 0\n",
    "for n in range(0,states.shape[0],4):\n",
    "    lab = f'Step {n}'\n",
    "    if n == 0:\n",
    "        lab = 'Algebraic inversion at initial guess'\n",
    "    \n",
    "    plt.plot(wl_nan, states[n,:-2] + offset, label=lab)\n",
    "    offset += 0.04\n",
    "plt.plot(wl_nan, states[-1,:-2] + offset, label=f'Step {states.shape[0]}')\n",
    "plt.legend()\n",
    "\n",
    "print(states[-1,-2:])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "0e8fcb0f-cd8e-47b9-9146-2e1335afcfd2",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.14"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
